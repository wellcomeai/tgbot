import sqlite3
import json
import os
import csv
import io
from pathlib import Path
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Render —Å Disk"""
        if db_path is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render Disk
            render_disk_path = os.environ.get('RENDER_DISK_PATH', '/data')
            
            if render_disk_path and os.path.exists(render_disk_path):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Render Disk –¥–ª—è persistent storage
                db_dir = Path(render_disk_path)
                logger.info(f"üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º Render Disk: {db_dir}")
            else:
                # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ fallback
                project_dir = Path(__file__).parent
                db_dir = project_dir / 'data'
                logger.info(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É: {db_dir}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            db_dir.mkdir(parents=True, exist_ok=True)
            db_path = db_dir / 'bot_database.db'
        
        self.db_path = str(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        try:
            db_dir = Path(self.db_path).parent
            if not db_dir.exists():
                db_dir.mkdir(parents=True, exist_ok=True)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î: {db_dir}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
            test_file = db_dir / 'test_write.tmp'
            try:
                test_file.write_text('test')
                test_file.unlink()
                logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {db_dir} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {db_dir}: {e}")
                raise
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ë–î: {e}")
            raise
        
        self.init_db()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")
    
    def init_db(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path, timeout=30)
            cursor = conn.cursor()
            
            # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            cursor.execute('PRAGMA journal_mode=WAL')
            cursor.execute('PRAGMA synchronous=NORMAL')
            cursor.execute('PRAGMA cache_size=10000')
            cursor.execute('PRAGMA temp_store=MEMORY')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active INTEGER DEFAULT 1,
                    bot_started INTEGER DEFAULT 0,
                    has_paid INTEGER DEFAULT 0,
                    paid_at TIMESTAMP DEFAULT NULL
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            cursor.execute("PRAGMA table_info(users)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'bot_started' not in columns:
                cursor.execute('ALTER TABLE users ADD COLUMN bot_started INTEGER DEFAULT 0')
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ bot_started –≤ users")
            
            if 'has_paid' not in columns:
                cursor.execute('ALTER TABLE users ADD COLUMN has_paid INTEGER DEFAULT 0')
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ has_paid –≤ users")
            
            if 'paid_at' not in columns:
                cursor.execute('ALTER TABLE users ADD COLUMN paid_at TIMESTAMP DEFAULT NULL')
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ paid_at –≤ users")
            
            # –ù–û–í–ê–Ø –ö–û–õ–û–ù–ö–ê: payed_till
            if 'payed_till' not in columns:
                cursor.execute('ALTER TABLE users ADD COLUMN payed_till DATE DEFAULT NULL')
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ payed_till –≤ users")
            
            # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS payments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    amount TEXT,
                    payment_status TEXT,
                    utm_source TEXT,
                    utm_id TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
            ''')
            
            # –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS renewal_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            cursor.execute('''
                INSERT OR IGNORE INTO renewal_settings (key, value) 
                VALUES ('renewal_message', ?)
            ''', ("‚è∞ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!</b>\n\n"
                 "üí≥ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                 "‚ú® –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫!",))
            
            cursor.execute('''
                INSERT OR IGNORE INTO renewal_settings (key, value) 
                VALUES ('renewal_photo_url', '')
            ''')
            
            cursor.execute('''
                INSERT OR IGNORE INTO renewal_settings (key, value) 
                VALUES ('renewal_button_text', '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
            ''')
            
            cursor.execute('''
                INSERT OR IGNORE INTO renewal_settings (key, value) 
                VALUES ('renewal_button_url', '')
            ''')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS broadcast_messages (
                    message_number INTEGER PRIMARY KEY,
                    text TEXT NOT NULL,
                    delay_hours INTEGER DEFAULT 24,
                    photo_url TEXT DEFAULT NULL
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É photo_url –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î)
            cursor.execute("PRAGMA table_info(broadcast_messages)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'photo_url' not in columns:
                cursor.execute('ALTER TABLE broadcast_messages ADD COLUMN photo_url TEXT DEFAULT NULL')
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ photo_url –≤ broadcast_messages")
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS message_buttons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_number INTEGER,
                    button_text TEXT NOT NULL,
                    button_url TEXT NOT NULL,
                    position INTEGER DEFAULT 1,
                    FOREIGN KEY (message_number) REFERENCES broadcast_messages(message_number)
                )
            ''')
            
            # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS welcome_buttons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    button_text TEXT NOT NULL UNIQUE,
                    position INTEGER DEFAULT 1
                )
            ''')
            
            # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS welcome_follow_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    welcome_button_id INTEGER,
                    message_number INTEGER,
                    text TEXT NOT NULL,
                    photo_url TEXT DEFAULT NULL,
                    FOREIGN KEY (welcome_button_id) REFERENCES welcome_buttons(id)
                )
            ''')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å callback_data –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
            cursor.execute("PRAGMA table_info(welcome_buttons)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'callback_data' in columns:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS welcome_buttons_new (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        button_text TEXT NOT NULL UNIQUE,
                        position INTEGER DEFAULT 1
                    )
                ''')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —É–±–∏—Ä–∞—è callback_data
                cursor.execute('''
                    INSERT INTO welcome_buttons_new (id, button_text, position)
                    SELECT id, button_text, position FROM welcome_buttons
                ''')
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                cursor.execute('DROP TABLE welcome_buttons')
                cursor.execute('ALTER TABLE welcome_buttons_new RENAME TO welcome_buttons')
                
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã welcome_buttons –¥–ª—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫")
            
            # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS goodbye_buttons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    button_text TEXT NOT NULL,
                    button_url TEXT NOT NULL,
                    position INTEGER DEFAULT 1
                )
            ''')
            
            # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_broadcasts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_text TEXT NOT NULL,
                    photo_url TEXT DEFAULT NULL,
                    scheduled_time TIMESTAMP NOT NULL,
                    is_sent INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_broadcast_buttons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    broadcast_id INTEGER,
                    button_text TEXT NOT NULL,
                    button_url TEXT NOT NULL,
                    position INTEGER DEFAULT 1,
                    FOREIGN KEY (broadcast_id) REFERENCES scheduled_broadcasts(id)
                )
            ''')

            # –ù–û–í–´–ï –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –†–ê–°–°–´–õ–û–ö –û–ü–õ–ê–¢–ò–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô

            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS paid_broadcast_messages (
                    message_number INTEGER PRIMARY KEY,
                    text TEXT NOT NULL,
                    delay_hours REAL DEFAULT 24,
                    photo_url TEXT DEFAULT NULL
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS paid_message_buttons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_number INTEGER,
                    button_text TEXT NOT NULL,
                    button_url TEXT NOT NULL,
                    position INTEGER DEFAULT 1,
                    FOREIGN KEY (message_number) REFERENCES paid_broadcast_messages(message_number)
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS paid_scheduled_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    message_number INTEGER,
                    scheduled_time TIMESTAMP,
                    is_sent INTEGER DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users(user_id),
                    FOREIGN KEY (message_number) REFERENCES paid_broadcast_messages(message_number)
                )
            ''')

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS paid_scheduled_broadcasts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_text TEXT NOT NULL,
                    photo_url TEXT DEFAULT NULL,
                    scheduled_time TIMESTAMP NOT NULL,
                    is_sent INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS paid_scheduled_broadcast_buttons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    broadcast_id INTEGER,
                    button_text TEXT NOT NULL,
                    button_url TEXT NOT NULL,
                    position INTEGER DEFAULT 1,
                    FOREIGN KEY (broadcast_id) REFERENCES paid_scheduled_broadcasts(id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS broadcast_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
            cursor.execute('''
                INSERT OR IGNORE INTO broadcast_settings (key, value) 
                VALUES ('broadcast_enabled', '1')
            ''')
            
            cursor.execute('''
                INSERT OR IGNORE INTO broadcast_settings (key, value) 
                VALUES ('auto_resume_time', '')
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    message_number INTEGER,
                    scheduled_time TIMESTAMP,
                    is_sent INTEGER DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users(user_id),
                    FOREIGN KEY (message_number) REFERENCES broadcast_messages(message_number)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('welcome_message', ?)
            ''', ("üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                 "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ! üöÄ\n\n"
                 "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:",))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('goodbye_message', ?)
            ''', ("üò¢ –ñ–∞–ª—å, —á—Ç–æ –≤—ã –ø–æ–∫–∏–¥–∞–µ—Ç–µ –Ω–∞—Å!\n\n"
                 "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n"
                 "–£–¥–∞—á–∏! üëã",))
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('welcome_photo_url', '')
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('goodbye_photo_url', '')
            ''')
            
            # –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('payment_success_message', ?)
            ''', ("üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                 "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                 "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                 "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                 "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",))
            
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('payment_success_photo_url', '')
            ''')
            
            # ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('success_message_enabled', '1')
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_messages = [
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 1: –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üìö", 0.05, None),    # 3 –º–∏–Ω—É—Ç—ã
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üîß", 4, None),   # 4 —á–∞—Å–∞
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 3: –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã üí°", 8, None),          # 8 —á–∞—Å–æ–≤
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 4: –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ‚ùì", 12, None),           # 12 —á–∞—Å–æ–≤
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 5: –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤ üìà", 16, None),          # 16 —á–∞—Å–æ–≤
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 6: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã üìñ", 20, None),           # 20 —á–∞—Å–æ–≤
                ("–°–æ–æ–±—â–µ–Ω–∏–µ 7: –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üôè", 23, None)     # 23 —á–∞—Å–∞
            ]
            
            for i, (text, delay, photo) in enumerate(default_messages, 1):
                cursor.execute('''
                    INSERT OR IGNORE INTO broadcast_messages (message_number, text, delay_hours, photo_url)
                    VALUES (?, ?, ?, ?)
                ''', (i, text, delay, photo))
            
            conn.commit()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_bot_started ON users(bot_started)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_paid ON users(has_paid)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_scheduled_messages_time ON scheduled_messages(scheduled_time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_scheduled_messages_sent ON scheduled_messages(is_sent)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(payment_status)')

            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_paid_scheduled_messages_time ON paid_scheduled_messages(scheduled_time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_paid_scheduled_messages_sent ON paid_scheduled_messages(is_sent)')
            
            conn.commit()
            logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
        except sqlite3.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            if 'conn' in locals():
                conn.close()
    
    def _get_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        max_retries = 5
        retry_delay = 0.1
        
        for attempt in range(max_retries):
            try:
                conn = sqlite3.connect(
                    self.db_path, 
                    timeout=30,
                    check_same_thread=False,
                    isolation_level=None  # –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç
                )
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Render
                conn.execute('PRAGMA journal_mode=WAL')
                conn.execute('PRAGMA synchronous=NORMAL')
                conn.execute('PRAGMA cache_size=10000')
                conn.execute('PRAGMA temp_store=MEMORY')
                conn.execute('PRAGMA mmap_size=268435456')  # 256MB
                
                return conn
            except sqlite3.OperationalError as e:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {e}")
                    import time
                    time.sleep(retry_delay * (attempt + 1))
                    continue
                else:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    raise
    
    def get_database_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            info = {
                'db_path': self.db_path,
                'db_size_mb': round(os.path.getsize(self.db_path) / (1024 * 1024), 2) if os.path.exists(self.db_path) else 0,
                'disk_space_mb': self._get_disk_space(),
                'render_disk_path': os.environ.get('RENDER_DISK_PATH', '/data'),
                'wal_files': self._check_wal_files()
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î
            cursor.execute('PRAGMA integrity_check')
            integrity = cursor.fetchone()[0]
            info['integrity'] = integrity
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT count(*) FROM sqlite_master WHERE type='table'")
            info['tables_count'] = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            try:
                cursor.execute('SELECT COUNT(*) FROM users')
                info['users_count'] = cursor.fetchone()[0]
                
                cursor.execute('SELECT COUNT(*) FROM scheduled_messages')
                info['scheduled_messages_count'] = cursor.fetchone()[0]
                
                cursor.execute('SELECT COUNT(*) FROM payments')
                info['payments_count'] = cursor.fetchone()[0]
            except:
                info['users_count'] = 'N/A'
                info['scheduled_messages_count'] = 'N/A' 
                info['payments_count'] = 'N/A'
            
            conn.close()
            return info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
            return {'error': str(e), 'db_path': self.db_path}
    
    def _get_disk_space(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ"""
        try:
            import shutil
            total, used, free = shutil.disk_usage(Path(self.db_path).parent)
            return {
                'total_mb': round(total / (1024 * 1024), 2),
                'used_mb': round(used / (1024 * 1024), 2),
                'free_mb': round(free / (1024 * 1024), 2)
            }
        except:
            return 'N/A'
    
    def _check_wal_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ WAL —Ñ–∞–π–ª–æ–≤"""
        try:
            db_dir = Path(self.db_path).parent
            wal_files = list(db_dir.glob('*.wal')) + list(db_dir.glob('*.shm'))
            return [f.name for f in wal_files]
        except:
            return []

    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–¢–ï–ñ–ê–ú–ò =====
    
    def mark_user_paid(self, user_id, amount, payment_status, payed_till=None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if payed_till:
                cursor.execute('''
                    UPDATE users 
                    SET has_paid = 1, paid_at = CURRENT_TIMESTAMP, payed_till = ?
                    WHERE user_id = ?
                ''', (payed_till, user_id))
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π ({amount}) –¥–æ {payed_till}")
            else:
                cursor.execute('''
                    UPDATE users 
                    SET has_paid = 1, paid_at = CURRENT_TIMESTAMP 
                    WHERE user_id = ?
                ''', (user_id,))
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π ({amount})")
            
            if cursor.rowcount == 0:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã")
                return False
            
            conn.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()
    
    def log_payment(self, user_id, amount, payment_status, utm_source=None, utm_id=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO payments (user_id, amount, payment_status, utm_source, utm_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, amount, payment_status, utm_source, utm_id))
            
            conn.commit()
            logger.info(f"üí∞ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ø–ª–∞—Ç–µ–∂: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {amount}, —Å—Ç–∞—Ç—É—Å {payment_status}")
            return cursor.lastrowid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            try:
                conn.rollback()
            except:
                pass
            return None
        finally:
            if conn:
                conn.close()
    
    def get_payment_success_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT value FROM settings WHERE key = "payment_success_message"')
            message = cursor.fetchone()
            
            cursor.execute('SELECT value FROM settings WHERE key = "payment_success_photo_url"')
            photo = cursor.fetchone()
            
            return {
                'text': message[0] if message else None,
                'photo_url': photo[0] if photo and photo[0] else None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def set_payment_success_message(self, text, photo_url=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) 
                VALUES ('payment_success_message', ?)
            ''', (text,))
            
            if photo_url is not None:
                cursor.execute('''
                    INSERT OR REPLACE INTO settings (key, value) 
                    VALUES ('payment_success_photo_url', ?)
                ''', (photo_url,))
            
            conn.commit()
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        finally:
            if conn:
                conn.close()
    
    def get_payment_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
            cursor.execute('SELECT COUNT(*) FROM payments WHERE payment_status = "success"')
            total_payments = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—á–∞–≤—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º
            cursor.execute('SELECT COUNT(*) FROM users WHERE bot_started = 1 AND is_active = 1')
            total_users = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor.execute('SELECT COUNT(*) FROM users WHERE has_paid = 1')
            paid_users = cursor.fetchone()[0]
            
            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            conversion_rate = (paid_users / total_users * 100) if total_users > 0 else 0
            
            # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
            cursor.execute('SELECT AVG(CAST(amount AS REAL)) FROM payments WHERE payment_status = "success" AND amount != ""')
            avg_amount_result = cursor.fetchone()
            avg_amount = avg_amount_result[0] if avg_amount_result[0] is not None else 0
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            cursor.execute('''
                SELECT p.user_id, u.first_name, u.username, p.amount, p.created_at
                FROM payments p
                JOIN users u ON p.user_id = u.user_id
                WHERE p.payment_status = "success"
                ORDER BY p.created_at DESC
                LIMIT 10
            ''')
            recent_payments = cursor.fetchall()
            
            # –ü–ª–∞—Ç–µ–∂–∏ –ø–æ UTM –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            cursor.execute('''
                SELECT utm_source, COUNT(*) as count
                FROM payments 
                WHERE payment_status = "success" AND utm_source IS NOT NULL 
                GROUP BY utm_source
            ''')
            utm_sources = cursor.fetchall()
            
            return {
                'total_payments': total_payments,
                'total_users': total_users,
                'paid_users': paid_users,
                'conversion_rate': round(conversion_rate, 2),
                'avg_amount': round(avg_amount, 2) if avg_amount else 0,
                'recent_payments': recent_payments,
                'utm_sources': utm_sources
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def cancel_remaining_messages(self, user_id):
        """–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                SELECT COUNT(*) FROM scheduled_messages 
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            count = cursor.fetchone()[0]
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                DELETE FROM scheduled_messages 
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            
            conn.commit()
            logger.info(f"üö´ –û—Ç–º–µ–Ω–µ–Ω–æ {count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return 0
        finally:
            if conn:
                conn.close()
    
    # ===== ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø =====
    
    def is_success_message_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT value FROM settings WHERE key = "success_message_enabled"')
            result = cursor.fetchone()
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
            if result is None:
                return True
            
            return result[0] == "1" or result[0] == "True"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        finally:
            if conn:
                conn.close()
    
    def set_success_message_enabled(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            value = "1" if enabled else "0"
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) 
                VALUES (?, ?)
            ''', ('success_message_enabled', value))
            
            conn.commit()
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            try:
                conn.rollback()
            except:
                pass
        finally:
            if conn:
                conn.close()
    
    # ===== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫) =====
    
    def add_user(self, user_id, username, first_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, is_active, bot_started, has_paid)
                VALUES (?, ?, ?, 1, 0, 0)
            ''', (user_id, username, first_name))
            
            conn.commit()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()
    
    def mark_user_started_bot(self, user_id):
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–∞—á–∞–≤—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute('SELECT user_id, bot_started, is_active, has_paid FROM users WHERE user_id = ?', (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–º–µ—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–∞–∫ –Ω–∞—á–∞–≤—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º")
                return False
            
            user_id_db, current_bot_started, is_active, has_paid = user_data
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            if not is_active:
                cursor.execute('UPDATE users SET is_active = 1 WHERE user_id = ?', (user_id,))
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—á–∞–≤—à–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
            if current_bot_started:
                logger.debug(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—á–∞–≤—à–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º")
                return True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å bot_started
            cursor.execute('''
                UPDATE users SET bot_started = 1 WHERE user_id = ?
            ''', (user_id,))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            if cursor.rowcount == 0:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å bot_started –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            conn.commit()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—á–∞–≤—à–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ bot_started –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()
    
    def get_user_with_debug(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users WHERE user_id = ?
            ''', (user_id,))
            user = cursor.fetchone()
            
            if user:
                logger.debug(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: active={user[4]}, bot_started={user[5]}, has_paid={user[6]}")
            else:
                logger.debug(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            
            return user
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def ensure_user_exists_and_active(self, user_id, username=None, first_name=None):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute('SELECT user_id, is_active FROM users WHERE user_id = ?', (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                cursor.execute('''
                    INSERT INTO users (user_id, username, first_name, is_active, bot_started, has_paid)
                    VALUES (?, ?, ?, 1, 0, 0)
                ''', (user_id, username or '', first_name or ''))
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                if not user_data[1]:
                    cursor.execute('UPDATE users SET is_active = 1 WHERE user_id = ?', (user_id,))
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            conn.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()
    
    def get_users_with_bot_started(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users WHERE is_active = 1 AND bot_started = 1
            ''')
            users = cursor.fetchall()
            return users
        finally:
            if conn:
                conn.close()
    
    def deactivate_user(self, user_id):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE users SET is_active = 0 WHERE user_id = ?
            ''', (user_id,))
            
            conn.commit()
            logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        finally:
            if conn:
                conn.close()
    
    def get_user(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users WHERE user_id = ?
            ''', (user_id,))
            user = cursor.fetchone()
            return user
        finally:
            if conn:
                conn.close()
    
    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users WHERE is_active = 1
            ''')
            users = cursor.fetchall()
            return users
        finally:
            if conn:
                conn.close()
    
    def get_latest_users(self, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users 
                WHERE is_active = 1 
                ORDER BY joined_at DESC 
                LIMIT ?
            ''', (limit,))
            users = cursor.fetchall()
            return users
        finally:
            if conn:
                conn.close()
    
    def export_users_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users 
                ORDER BY joined_at DESC
            ''')
            users = cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(['ID', 'Username', '–ò–º—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–°—Ç–∞—Ç—É—Å', '–†–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º', '–û–ø–ª–∞—Ç–∏–ª', '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã'])
            
            # –î–∞–Ω–Ω—ã–µ
            for user in users:
                user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at = user
                status = '–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–û—Ç–ø–∏—Å–∞–ª—Å—è'
                bot_status = '–î–∞' if bot_started else '–ù–µ—Ç'
                paid_status = '–î–∞' if has_paid else '–ù–µ—Ç'
                paid_date = paid_at if paid_at else ''
                writer.writerow([user_id, username or '', first_name or '', joined_at, status, bot_status, paid_status, paid_date])
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º CSV –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            csv_content = output.getvalue()
            output.close()
            
            return csv_content
        finally:
            if conn:
                conn.close()
    
    def get_welcome_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT value FROM settings WHERE key = "welcome_message"')
            message = cursor.fetchone()
            
            cursor.execute('SELECT value FROM settings WHERE key = "welcome_photo_url"')
            photo = cursor.fetchone()
            
            return {
                'text': message[0] if message else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                'photo': photo[0] if photo and photo[0] else None
            }
        finally:
            if conn:
                conn.close()
    
    def get_goodbye_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT value FROM settings WHERE key = "goodbye_message"')
            message = cursor.fetchone()
            
            cursor.execute('SELECT value FROM settings WHERE key = "goodbye_photo_url"')
            photo = cursor.fetchone()
            
            return {
                'text': message[0] if message else "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                'photo': photo[0] if photo and photo[0] else None
            }
        finally:
            if conn:
                conn.close()
    
    def set_welcome_message(self, message, photo_url=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE settings SET value = ? WHERE key = "welcome_message"
            ''', (message,))
            
            if photo_url is not None:
                cursor.execute('''
                    UPDATE settings SET value = ? WHERE key = "welcome_photo_url"
                ''', (photo_url,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def set_goodbye_message(self, message, photo_url=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE settings SET value = ? WHERE key = "goodbye_message"
            ''', (message,))
            
            if photo_url is not None:
                cursor.execute('''
                    UPDATE settings SET value = ? WHERE key = "goodbye_photo_url"
                ''', (photo_url,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–û–ö –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====
    
    def get_welcome_buttons(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, position 
                FROM welcome_buttons 
                ORDER BY position
            ''')
            buttons = cursor.fetchall()
            return buttons
        finally:
            if conn:
                conn.close()
    
    def add_welcome_button(self, button_text, position=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO welcome_buttons (button_text, position)
                VALUES (?, ?)
            ''', (button_text, position))
            
            button_id = cursor.lastrowid
            conn.commit()
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {button_text}")
            return button_id
        finally:
            if conn:
                conn.close()
    
    def update_welcome_button(self, button_id, button_text=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if button_text is not None:
                cursor.execute('''
                    UPDATE welcome_buttons SET button_text = ? WHERE id = ?
                ''', (button_text, button_id))
            
            conn.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è #{button_id}")
        finally:
            if conn:
                conn.close()
    
    def get_welcome_button_by_text(self, button_text):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, position 
                FROM welcome_buttons 
                WHERE button_text = ?
            ''', (button_text,))
            
            button = cursor.fetchone()
            return button
        finally:
            if conn:
                conn.close()
    
    def delete_welcome_button(self, button_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('DELETE FROM welcome_follow_messages WHERE welcome_button_id = ?', (button_id,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–Ω–æ–ø–∫—É
            cursor.execute('DELETE FROM welcome_buttons WHERE id = ?', (button_id,))
            
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è #{button_id} —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        finally:
            if conn:
                conn.close()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–°–õ–ï–î–£–Æ–©–ò–• –°–û–û–ë–©–ï–ù–ò–ô –ü–û–°–õ–ï –ö–ù–û–ü–û–ö =====
    
    def get_welcome_follow_messages(self, welcome_button_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, message_number, text, photo_url 
                FROM welcome_follow_messages 
                WHERE welcome_button_id = ? 
                ORDER BY message_number
            ''', (welcome_button_id,))
            
            messages = cursor.fetchall()
            return messages
        finally:
            if conn:
                conn.close()
    
    def add_welcome_follow_message(self, welcome_button_id, text, photo_url=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                SELECT MAX(message_number) FROM welcome_follow_messages 
                WHERE welcome_button_id = ?
            ''', (welcome_button_id,))
            max_number = cursor.fetchone()[0]
            message_number = (max_number or 0) + 1
            
            cursor.execute('''
                INSERT INTO welcome_follow_messages (welcome_button_id, message_number, text, photo_url)
                VALUES (?, ?, ?, ?)
            ''', (welcome_button_id, message_number, text, photo_url))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number} –¥–ª—è –∫–Ω–æ–ø–∫–∏ {welcome_button_id}")
            return message_number
        finally:
            if conn:
                conn.close()
    
    def update_welcome_follow_message(self, message_id, text=None, photo_url=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if text is not None:
                cursor.execute('''
                    UPDATE welcome_follow_messages SET text = ? WHERE id = ?
                ''', (text, message_id))
            
            if photo_url is not None:
                cursor.execute('''
                    UPDATE welcome_follow_messages SET photo_url = ? WHERE id = ?
                ''', (photo_url if photo_url else None, message_id))
            
            conn.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_id}")
        finally:
            if conn:
                conn.close()
    
    def delete_welcome_follow_message(self, message_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('DELETE FROM welcome_follow_messages WHERE id = ?', (message_id,))
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_id}")
        finally:
            if conn:
                conn.close()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–û–ö –ü–†–û–©–ê–õ–¨–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====
    
    def get_goodbye_buttons(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, button_url, position 
                FROM goodbye_buttons 
                ORDER BY position
            ''')
            buttons = cursor.fetchall()
            return buttons
        finally:
            if conn:
                conn.close()
    
    def get_goodbye_button_by_text(self, button_text):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–æ—â–∞–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, button_url, position 
                FROM goodbye_buttons 
                WHERE button_text = ?
            ''', (button_text,))
            button = cursor.fetchone()
            return button
        finally:
            if conn:
                conn.close()
    
    def add_goodbye_button(self, button_text, button_url):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –ø—Ä–æ—â–∞–Ω–∏—è —Å URL"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            cursor.execute('SELECT MAX(position) FROM goodbye_buttons')
            max_pos = cursor.fetchone()[0]
            position = (max_pos or 0) + 1
            
            cursor.execute('''
                INSERT INTO goodbye_buttons (button_text, button_url, position)
                VALUES (?, ?, ?)
            ''', (button_text, button_url, position))
            
            button_id = cursor.lastrowid
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è: {button_text} -> {button_url}")
            return button_id
        finally:
            if conn:
                conn.close()
    
    def update_goodbye_button(self, button_id, button_text=None, button_url=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            if button_text is not None and button_url is not None:
                cursor.execute('''
                    UPDATE goodbye_buttons 
                    SET button_text = ?, button_url = ?
                    WHERE id = ?
                ''', (button_text, button_url, button_id))
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            elif button_text is not None:
                cursor.execute('''
                    UPDATE goodbye_buttons 
                    SET button_text = ?
                    WHERE id = ?
                ''', (button_text, button_id))
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ URL
            elif button_url is not None:
                cursor.execute('''
                    UPDATE goodbye_buttons 
                    SET button_url = ?
                    WHERE id = ?
                ''', (button_url, button_id))
            
            conn.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è #{button_id}")
        finally:
            if conn:
                conn.close()
    
    def delete_goodbye_button(self, button_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —É–¥–∞–ª—è–µ–º–æ–π –∫–Ω–æ–ø–∫–∏
            cursor.execute('SELECT position FROM goodbye_buttons WHERE id = ?', (button_id,))
            result = cursor.fetchone()
            
            if result:
                position = result[0]
                
                # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                cursor.execute('DELETE FROM goodbye_buttons WHERE id = ?', (button_id,))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫
                cursor.execute('''
                    UPDATE goodbye_buttons 
                    SET position = position - 1 
                    WHERE position > ?
                ''', (position,))
                
                conn.commit()
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è #{button_id}")
        finally:
            if conn:
                conn.close()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –ú–ê–°–°–û–í–´–• –†–ê–°–°–´–õ–û–ö =====
    
    def get_scheduled_broadcasts(self, include_sent=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if include_sent:
                cursor.execute('''
                    SELECT id, message_text, photo_url, scheduled_time, is_sent, created_at
                    FROM scheduled_broadcasts 
                    ORDER BY scheduled_time
                ''')
            else:
                cursor.execute('''
                    SELECT id, message_text, photo_url, scheduled_time, is_sent, created_at
                    FROM scheduled_broadcasts 
                    WHERE is_sent = 0
                    ORDER BY scheduled_time
                ''')
            
            broadcasts = cursor.fetchall()
            return broadcasts
        finally:
            if conn:
                conn.close()
    
    def add_scheduled_broadcast(self, message_text, scheduled_time, photo_url=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO scheduled_broadcasts (message_text, photo_url, scheduled_time)
                VALUES (?, ?, ?)
            ''', (message_text, photo_url, scheduled_time))
            
            broadcast_id = cursor.lastrowid
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –Ω–∞ {scheduled_time}")
            return broadcast_id
        finally:
            if conn:
                conn.close()
    
    def delete_scheduled_broadcast(self, broadcast_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤—Å–µ—Ö –µ—ë –∫–Ω–æ–ø–æ–∫"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            cursor.execute('DELETE FROM scheduled_broadcast_buttons WHERE broadcast_id = ?', (broadcast_id,))
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            cursor.execute('DELETE FROM scheduled_broadcasts WHERE id = ?', (broadcast_id,))
            
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id}")
        finally:
            if conn:
                conn.close()
    
    def mark_broadcast_sent(self, broadcast_id):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE scheduled_broadcasts SET is_sent = 1 WHERE id = ?
            ''', (broadcast_id,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def get_pending_broadcasts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            current_time = datetime.now()
            cursor.execute('''
                SELECT id, message_text, photo_url, scheduled_time
                FROM scheduled_broadcasts 
                WHERE is_sent = 0 AND scheduled_time <= ?
                ORDER BY scheduled_time
            ''', (current_time,))
            
            broadcasts = cursor.fetchall()
            return broadcasts
        finally:
            if conn:
                conn.close()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–û–ö –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –†–ê–°–°–´–õ–û–ö =====
    
    def get_scheduled_broadcast_buttons(self, broadcast_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, button_url, position 
                FROM scheduled_broadcast_buttons 
                WHERE broadcast_id = ? 
                ORDER BY position
            ''', (broadcast_id,))
            
            buttons = cursor.fetchall()
            return buttons
        finally:
            if conn:
                conn.close()
    
    def add_scheduled_broadcast_button(self, broadcast_id, button_text, button_url, position=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO scheduled_broadcast_buttons (broadcast_id, button_text, button_url, position)
                VALUES (?, ?, ?, ?)
            ''', (broadcast_id, button_text, button_url, position))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ #{broadcast_id}")
        finally:
            if conn:
                conn.close()
    
    def delete_scheduled_broadcast_button(self, button_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('DELETE FROM scheduled_broadcast_buttons WHERE id = ?', (button_id,))
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ #{button_id}")
        finally:
            if conn:
                conn.close()
    
    # ===== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
    
    def get_broadcast_message(self, message_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT text, delay_hours, photo_url FROM broadcast_messages 
                WHERE message_number = ?
            ''', (message_number,))
            result = cursor.fetchone()
            return result
        finally:
            if conn:
                conn.close()
    
    def get_all_broadcast_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT * FROM broadcast_messages ORDER BY message_number')
            messages = cursor.fetchall()
            return messages
        finally:
            if conn:
                conn.close()
    
    def add_broadcast_message(self, text, delay_hours, photo_url=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('SELECT MAX(message_number) FROM broadcast_messages')
            max_number = cursor.fetchone()[0]
            next_number = (max_number or 0) + 1
            
            cursor.execute('''
                INSERT INTO broadcast_messages (message_number, text, delay_hours, photo_url)
                VALUES (?, ?, ?, ?)
            ''', (next_number, text, delay_hours, photo_url))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ #{next_number}")
            return next_number
        finally:
            if conn:
                conn.close()
    
    def delete_broadcast_message(self, message_number):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤—Å–µ—Ö –µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            cursor.execute('''
                DELETE FROM scheduled_messages 
                WHERE message_number = ? AND is_sent = 0
            ''', (message_number,))
            
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                DELETE FROM message_buttons 
                WHERE message_number = ?
            ''', (message_number,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute('''
                DELETE FROM broadcast_messages 
                WHERE message_number = ?
            ''', (message_number,))
            
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ #{message_number}")
        finally:
            if conn:
                conn.close()
    
    def update_broadcast_message(self, message_number, text=None, delay_hours=None, photo_url=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if text is not None:
                cursor.execute('''
                    UPDATE broadcast_messages SET text = ? 
                    WHERE message_number = ?
                ''', (text, message_number))
            
            if delay_hours is not None:
                cursor.execute('''
                    UPDATE broadcast_messages SET delay_hours = ? 
                    WHERE message_number = ?
                ''', (delay_hours, message_number))
            
            if photo_url is not None:
                cursor.execute('''
                    UPDATE broadcast_messages SET photo_url = ? 
                    WHERE message_number = ?
                ''', (photo_url if photo_url else None, message_number))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def add_message_button(self, message_number, button_text, button_url, position=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO message_buttons (message_number, button_text, button_url, position)
                VALUES (?, ?, ?, ?)
            ''', (message_number, button_text, button_url, position))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é #{message_number}")
        finally:
            if conn:
                conn.close()
    
    def update_message_button(self, button_id, button_text=None, button_url=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if button_text is not None:
                cursor.execute('''
                    UPDATE message_buttons SET button_text = ? 
                    WHERE id = ?
                ''', (button_text, button_id))
            
            if button_url is not None:
                cursor.execute('''
                    UPDATE message_buttons SET button_url = ? 
                    WHERE id = ?
                ''', (button_url, button_id))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def delete_message_button(self, button_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('DELETE FROM message_buttons WHERE id = ?', (button_id,))
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def get_message_buttons(self, message_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, button_url, position 
                FROM message_buttons 
                WHERE message_number = ? 
                ORDER BY position
            ''', (message_number,))
            
            buttons = cursor.fetchall()
            return buttons
        finally:
            if conn:
                conn.close()
    
    def get_broadcast_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT value FROM broadcast_settings WHERE key = "broadcast_enabled"')
            enabled = cursor.fetchone()
            
            cursor.execute('SELECT value FROM broadcast_settings WHERE key = "auto_resume_time"')
            resume_time = cursor.fetchone()
            
            return {
                'enabled': enabled[0] == '1' if enabled else True,
                'auto_resume_time': resume_time[0] if resume_time and resume_time[0] else None
            }
        finally:
            if conn:
                conn.close()
    
    def set_broadcast_status(self, enabled, auto_resume_time=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE broadcast_settings SET value = ? WHERE key = "broadcast_enabled"
            ''', ('1' if enabled else '0',))
            
            if auto_resume_time is not None:
                cursor.execute('''
                    UPDATE broadcast_settings SET value = ? WHERE key = "auto_resume_time"
                ''', (auto_resume_time,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def schedule_message(self, user_id, message_number, scheduled_time):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
            cursor.execute('''
                SELECT user_id, is_active, bot_started, has_paid 
                FROM users 
                WHERE user_id = ?
            ''', (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            user_id_db, is_active, bot_started, has_paid = user_data
            
            if not is_active:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            if not bot_started:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ")
                return False
            
            # –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª, –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if has_paid:
                logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            cursor.execute('''
                SELECT message_number 
                FROM broadcast_messages 
                WHERE message_number = ?
            ''', (message_number,))
            message_data = cursor.fetchone()
            
            if not message_data:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                SELECT id FROM scheduled_messages 
                WHERE user_id = ? AND message_number = ? AND is_sent = 0
            ''', (user_id, message_number))
            existing_message = cursor.fetchone()
            
            if existing_message:
                logger.debug(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_number} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute('''
                INSERT INTO scheduled_messages (user_id, message_number, scheduled_time)
                VALUES (?, ?, ?)
            ''', (user_id, message_number, scheduled_time))
            
            conn.commit()
            logger.debug(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {scheduled_time}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()
    
    def get_pending_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            current_time = datetime.now()
            cursor.execute('''
                SELECT sm.id, sm.user_id, sm.message_number, bm.text, bm.photo_url
                FROM scheduled_messages sm
                JOIN broadcast_messages bm ON sm.message_number = bm.message_number
                WHERE sm.is_sent = 0 AND sm.scheduled_time <= ?
            ''', (current_time,))
            
            messages = cursor.fetchall()
            return messages
        finally:
            if conn:
                conn.close()
    
    def get_pending_messages_for_active_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ù–ï –û–ü–õ–ê–¢–ò–õ–ò"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            current_time = datetime.now()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute('SELECT COUNT(*) FROM scheduled_messages WHERE is_sent = 0')
            total_scheduled = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT COUNT(*) FROM scheduled_messages sm
                JOIN users u ON sm.user_id = u.user_id
                WHERE sm.is_sent = 0 AND u.is_active = 1 AND u.bot_started = 1 AND u.has_paid = 0
            ''')
            active_scheduled = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT COUNT(*) FROM scheduled_messages sm
                JOIN users u ON sm.user_id = u.user_id
                WHERE sm.is_sent = 0 AND sm.scheduled_time <= ? AND u.is_active = 1 AND u.bot_started = 1 AND u.has_paid = 0
            ''', (current_time,))
            ready_to_send = cursor.fetchone()[0]
            
            if total_scheduled > 0:
                logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –≤—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_scheduled}, –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö {active_scheduled}, –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ {ready_to_send}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ (–¢–û–õ–¨–ö–û –î–õ–Ø –ù–ï–û–ü–õ–ê–¢–ò–í–®–ò–•)
            cursor.execute('''
                SELECT sm.id, sm.user_id, sm.message_number, bm.text, bm.photo_url, sm.scheduled_time
                FROM scheduled_messages sm
                JOIN broadcast_messages bm ON sm.message_number = bm.message_number
                JOIN users u ON sm.user_id = u.user_id
                WHERE sm.is_sent = 0 
                AND sm.scheduled_time <= ?
                AND u.is_active = 1
                AND u.bot_started = 1
                AND u.has_paid = 0
                ORDER BY sm.scheduled_time ASC
            ''', (current_time,))
            
            messages = cursor.fetchall()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages:
                message_id, user_id, message_number, text, photo_url, scheduled_time = msg
                scheduled_dt = datetime.fromisoformat(scheduled_time) if isinstance(scheduled_time, str) else scheduled_time
                delay_minutes = int((current_time - scheduled_dt).total_seconds() / 60)
                logger.debug(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ–ø–æ–∑–¥–∞–Ω–∏–µ: {delay_minutes} –º–∏–Ω)")
            
            return [(m[0], m[1], m[2], m[3], m[4]) for m in messages]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ scheduled_time
        finally:
            if conn:
                conn.close()
    
    def get_user_scheduled_messages(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, message_number, scheduled_time, is_sent
                FROM scheduled_messages
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            
            messages = cursor.fetchall()
            return messages
        finally:
            if conn:
                conn.close()
    
    def get_user_scheduled_messages_count(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT COUNT(*) FROM scheduled_messages
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            count = cursor.fetchone()[0]
            
            return count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 0
        finally:
            if conn:
                conn.close()
    
    def mark_message_sent(self, message_id):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE scheduled_messages SET is_sent = 1 
                WHERE id = ?
            ''', (message_id,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()
    
    def cancel_user_messages(self, user_id):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                DELETE FROM scheduled_messages 
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            
            conn.commit()
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        finally:
            if conn:
                conn.close()
    
    def debug_user_state(self, user_id):
        """–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            debug_info = {}
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users WHERE user_id = ?
            ''', (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                debug_info['error'] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return debug_info
            
            debug_info['user'] = {
                'user_id': user_data[0],
                'username': user_data[1],
                'first_name': user_data[2],
                'joined_at': user_data[3],
                'is_active': bool(user_data[4]),
                'bot_started': bool(user_data[5]),
                'has_paid': bool(user_data[6]),
                'paid_at': user_data[7]
            }
            
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                SELECT id, message_number, scheduled_time, is_sent
                FROM scheduled_messages
                WHERE user_id = ?
                ORDER BY message_number
            ''', (user_id,))
            
            scheduled_messages = cursor.fetchall()
            debug_info['scheduled_messages'] = []
            
            for msg in scheduled_messages:
                debug_info['scheduled_messages'].append({
                    'id': msg[0],
                    'message_number': msg[1],
                    'scheduled_time': msg[2],
                    'is_sent': bool(msg[3])
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
            cursor.execute('SELECT message_number FROM broadcast_messages ORDER BY message_number')
            all_messages = [row[0] for row in cursor.fetchall()]
            
            scheduled_numbers = [msg['message_number'] for msg in debug_info['scheduled_messages']]
            missing_messages = [num for num in all_messages if num not in scheduled_numbers]
            
            debug_info['missing_messages'] = missing_messages
            debug_info['total_messages_expected'] = len(all_messages)
            debug_info['total_messages_scheduled'] = len(scheduled_messages)
            
            return debug_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {'error': str(e)}
        finally:
            if conn:
                conn.close()
    
    def get_database_health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            health_info = {}
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM users')
            health_info['total_users'] = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1')
            health_info['active_users'] = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM users WHERE bot_started = 1')
            health_info['bot_started_users'] = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM users WHERE has_paid = 1')
            health_info['paid_users'] = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM scheduled_messages WHERE is_sent = 0')
            health_info['pending_messages'] = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM scheduled_messages WHERE is_sent = 1')
            health_info['sent_messages'] = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM payments')
            health_info['total_payments'] = cursor.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            cursor.execute('''
                SELECT COUNT(*) FROM scheduled_messages sm
                JOIN users u ON sm.user_id = u.user_id
                WHERE sm.is_sent = 0 AND (u.is_active = 0 OR u.bot_started = 0)
            ''')
            health_info['orphaned_messages'] = cursor.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cursor.execute('''
                SELECT COUNT(*) FROM (
                    SELECT user_id, message_number, COUNT(*) as cnt
                    FROM scheduled_messages
                    WHERE is_sent = 0
                    GROUP BY user_id, message_number
                    HAVING cnt > 1
                )
            ''')
            health_info['duplicate_messages'] = cursor.fetchone()[0]
            
            return health_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def cleanup_old_scheduled_messages(self, days_old=7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cutoff_date = datetime.now() - timedelta(days=days_old)
            
            cursor.execute('''
                DELETE FROM scheduled_messages 
                WHERE is_sent = 1 AND scheduled_time < ?
            ''', (cutoff_date,))
            
            deleted_count = cursor.rowcount
            conn.commit()
            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0
        finally:
            if conn:
                conn.close()
    
    def get_user_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1')
            total_users = cursor.fetchone()[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º
            cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1 AND bot_started = 1')
            bot_started_users = cursor.fetchone()[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(days=1)
            cursor.execute('''
                SELECT COUNT(*) FROM users 
                WHERE joined_at >= ? AND is_active = 1
            ''', (yesterday,))
            new_users_24h = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('SELECT COUNT(*) FROM scheduled_messages WHERE is_sent = 1')
            sent_messages = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è
            cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 0')
            unsubscribed = cursor.fetchone()[0]
            
            # –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –û–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor.execute('SELECT COUNT(*) FROM users WHERE has_paid = 1')
            paid_users = cursor.fetchone()[0]
            
            return {
                'total_users': total_users,
                'bot_started_users': bot_started_users,
                'new_users_24h': new_users_24h,
                'sent_messages': sent_messages,
                'unsubscribed': unsubscribed,
                'paid_users': paid_users
            }
        finally:
            if conn:
                conn.close()

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–°–°–´–õ–û–ö –û–ü–õ–ê–¢–ò–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====

    def get_paid_broadcast_message(self, message_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ –Ω–æ–º–µ—Ä—É"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT text, delay_hours, photo_url FROM paid_broadcast_messages 
                WHERE message_number = ?
            ''', (message_number,))
            result = cursor.fetchone()
            return result
        finally:
            if conn:
                conn.close()

    def get_all_paid_broadcast_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT * FROM paid_broadcast_messages ORDER BY message_number')
            messages = cursor.fetchall()
            return messages
        finally:
            if conn:
                conn.close()

    def add_paid_broadcast_message(self, text, delay_hours, photo_url=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('SELECT MAX(message_number) FROM paid_broadcast_messages')
            max_number = cursor.fetchone()[0]
            next_number = (max_number or 0) + 1
            
            cursor.execute('''
                INSERT INTO paid_broadcast_messages (message_number, text, delay_hours, photo_url)
                VALUES (?, ?, ?, ?)
            ''', (next_number, text, delay_hours, photo_url))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö #{next_number}")
            return next_number
        finally:
            if conn:
                conn.close()

    def delete_paid_broadcast_message(self, message_number):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            cursor.execute('''
                DELETE FROM paid_scheduled_messages 
                WHERE message_number = ? AND is_sent = 0
            ''', (message_number,))
            
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                DELETE FROM paid_message_buttons 
                WHERE message_number = ?
            ''', (message_number,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute('''
                DELETE FROM paid_broadcast_messages 
                WHERE message_number = ?
            ''', (message_number,))
            
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö #{message_number}")
        finally:
            if conn:
                conn.close()

    def update_paid_broadcast_message(self, message_number, text=None, delay_hours=None, photo_url=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if text is not None:
                cursor.execute('''
                    UPDATE paid_broadcast_messages SET text = ? 
                    WHERE message_number = ?
                ''', (text, message_number))
            
            if delay_hours is not None:
                cursor.execute('''
                    UPDATE paid_broadcast_messages SET delay_hours = ? 
                    WHERE message_number = ?
                ''', (delay_hours, message_number))
            
            if photo_url is not None:
                cursor.execute('''
                    UPDATE paid_broadcast_messages SET photo_url = ? 
                    WHERE message_number = ?
                ''', (photo_url if photo_url else None, message_number))
            
            conn.commit()
        finally:
            if conn:
                conn.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
    def get_paid_message_buttons(self, message_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, button_url, position 
                FROM paid_message_buttons 
                WHERE message_number = ? 
                ORDER BY position
            ''', (message_number,))
            
            buttons = cursor.fetchall()
            return buttons
        finally:
            if conn:
                conn.close()

    def add_paid_message_button(self, message_number, button_text, button_url, position=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO paid_message_buttons (message_number, button_text, button_url, position)
                VALUES (?, ?, ?, ?)
            ''', (message_number, button_text, button_url, position))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö #{message_number}")
        finally:
            if conn:
                conn.close()

    def update_paid_message_button(self, button_id, button_text=None, button_url=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if button_text is not None:
                cursor.execute('''
                    UPDATE paid_message_buttons SET button_text = ? 
                    WHERE id = ?
                ''', (button_text, button_id))
            
            if button_url is not None:
                cursor.execute('''
                    UPDATE paid_message_buttons SET button_url = ? 
                    WHERE id = ?
                ''', (button_url, button_id))
            
            conn.commit()
        finally:
            if conn:
                conn.close()

    def delete_paid_message_button(self, button_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('DELETE FROM paid_message_buttons WHERE id = ?', (button_id,))
            conn.commit()
        finally:
            if conn:
                conn.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
    def schedule_paid_message(self, user_id, message_number, scheduled_time):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª
            cursor.execute('''
                SELECT has_paid FROM users WHERE user_id = ?
            ''', (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data or not user_data[0]:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                SELECT id FROM paid_scheduled_messages 
                WHERE user_id = ? AND message_number = ? AND is_sent = 0
            ''', (user_id, message_number))
            existing_message = cursor.fetchone()
            
            if existing_message:
                logger.debug(f"‚ÑπÔ∏è –ü–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute('''
                INSERT INTO paid_scheduled_messages (user_id, message_number, scheduled_time)
                VALUES (?, ?, ?)
            ''', (user_id, message_number, scheduled_time))
            
            conn.commit()
            logger.debug(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {scheduled_time}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()

    def get_pending_paid_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            current_time = datetime.now()
            cursor.execute('''
                SELECT psm.id, psm.user_id, psm.message_number, pbm.text, pbm.photo_url, psm.scheduled_time
                FROM paid_scheduled_messages psm
                JOIN paid_broadcast_messages pbm ON psm.message_number = pbm.message_number
                JOIN users u ON psm.user_id = u.user_id
                WHERE psm.is_sent = 0 
                AND psm.scheduled_time <= ?
                AND u.is_active = 1
                AND u.has_paid = 1
                ORDER BY psm.scheduled_time ASC
            ''', (current_time,))
            
            messages = cursor.fetchall()
            return [(m[0], m[1], m[2], m[3], m[4]) for m in messages]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ scheduled_time
        finally:
            if conn:
                conn.close()

    def mark_paid_message_sent(self, message_id):
        """–û—Ç–º–µ—Ç–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE paid_scheduled_messages SET is_sent = 1 
                WHERE id = ?
            ''', (message_id,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()

    def get_user_paid_scheduled_messages(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, message_number, scheduled_time, is_sent
                FROM paid_scheduled_messages
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            
            messages = cursor.fetchall()
            return messages
        finally:
            if conn:
                conn.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
    def add_paid_scheduled_broadcast(self, message_text, scheduled_time, photo_url=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO paid_scheduled_broadcasts (message_text, photo_url, scheduled_time)
                VALUES (?, ?, ?)
            ''', (message_text, photo_url, scheduled_time))
            
            broadcast_id = cursor.lastrowid
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö #{broadcast_id} –Ω–∞ {scheduled_time}")
            return broadcast_id
        finally:
            if conn:
                conn.close()

    def get_paid_scheduled_broadcasts(self, include_sent=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if include_sent:
                cursor.execute('''
                    SELECT id, message_text, photo_url, scheduled_time, is_sent, created_at
                    FROM paid_scheduled_broadcasts 
                    ORDER BY scheduled_time
                ''')
            else:
                cursor.execute('''
                    SELECT id, message_text, photo_url, scheduled_time, is_sent, created_at
                    FROM paid_scheduled_broadcasts 
                    WHERE is_sent = 0
                    ORDER BY scheduled_time
                ''')
            
            broadcasts = cursor.fetchall()
            return broadcasts
        finally:
            if conn:
                conn.close()

    def get_pending_paid_broadcasts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            current_time = datetime.now()
            cursor.execute('''
                SELECT id, message_text, photo_url, scheduled_time
                FROM paid_scheduled_broadcasts 
                WHERE is_sent = 0 AND scheduled_time <= ?
                ORDER BY scheduled_time
            ''', (current_time,))
            
            broadcasts = cursor.fetchall()
            return broadcasts
        finally:
            if conn:
                conn.close()

    def mark_paid_broadcast_sent(self, broadcast_id):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE paid_scheduled_broadcasts SET is_sent = 1 WHERE id = ?
            ''', (broadcast_id,))
            
            conn.commit()
        finally:
            if conn:
                conn.close()

    def delete_paid_scheduled_broadcast(self, broadcast_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            cursor.execute('DELETE FROM paid_scheduled_broadcast_buttons WHERE broadcast_id = ?', (broadcast_id,))
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            cursor.execute('DELETE FROM paid_scheduled_broadcasts WHERE id = ?', (broadcast_id,))
            
            conn.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö #{broadcast_id}")
        finally:
            if conn:
                conn.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
    def get_paid_scheduled_broadcast_buttons(self, broadcast_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, button_text, button_url, position 
                FROM paid_scheduled_broadcast_buttons 
                WHERE broadcast_id = ? 
                ORDER BY position
            ''', (broadcast_id,))
            
            buttons = cursor.fetchall()
            return buttons
        finally:
            if conn:
                conn.close()

    def add_paid_scheduled_broadcast_button(self, broadcast_id, button_text, button_url, position=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO paid_scheduled_broadcast_buttons (broadcast_id, button_text, button_url, position)
                VALUES (?, ?, ?, ?)
            ''', (broadcast_id, button_text, button_url, position))
            
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö #{broadcast_id}")
        finally:
            if conn:
                conn.close()

    def get_users_with_payment(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT user_id, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at 
                FROM users WHERE is_active = 1 AND has_paid = 1
            ''')
            users = cursor.fetchall()
            return users
        finally:
            if conn:
                conn.close()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–î–õ–ï–ù–ò–ï–ú –ü–û–î–ü–ò–°–û–ö =====
    
    def get_expired_subscriptions(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            from datetime import date
            today = date.today()
            
            cursor.execute('''
                SELECT user_id, username, first_name, payed_till
                FROM users 
                WHERE has_paid = 1 
                AND is_active = 1 
                AND payed_till = ?
            ''', (today,))
            
            expired_users = cursor.fetchall()
            return expired_users
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
        finally:
            if conn:
                conn.close()
    
    def get_renewal_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT value FROM renewal_settings WHERE key = "renewal_message"')
            message = cursor.fetchone()
            
            cursor.execute('SELECT value FROM renewal_settings WHERE key = "renewal_photo_url"')
            photo = cursor.fetchone()
            
            cursor.execute('SELECT value FROM renewal_settings WHERE key = "renewal_button_text"')
            button_text = cursor.fetchone()
            
            cursor.execute('SELECT value FROM renewal_settings WHERE key = "renewal_button_url"')
            button_url = cursor.fetchone()
            
            return {
                'text': message[0] if message else None,
                'photo_url': photo[0] if photo and photo[0] else None,
                'button_text': button_text[0] if button_text else None,
                'button_url': button_url[0] if button_url and button_url[0] else None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def set_renewal_message(self, text=None, photo_url=None, button_text=None, button_url=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            if text is not None:
                cursor.execute('''
                    INSERT OR REPLACE INTO renewal_settings (key, value) 
                    VALUES ('renewal_message', ?)
                ''', (text,))
            
            if photo_url is not None:
                cursor.execute('''
                    INSERT OR REPLACE INTO renewal_settings (key, value) 
                    VALUES ('renewal_photo_url', ?)
                ''', (photo_url,))
            
            if button_text is not None:
                cursor.execute('''
                    INSERT OR REPLACE INTO renewal_settings (key, value) 
                    VALUES ('renewal_button_text', ?)
                ''', (button_text,))
            
            if button_url is not None:
                cursor.execute('''
                    INSERT OR REPLACE INTO renewal_settings (key, value) 
                    VALUES ('renewal_button_url', ?)
                ''', (button_url,))
            
            conn.commit()
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}")
        finally:
            if conn:
                conn.close()
    
    def expire_user_subscription(self, user_id):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            cursor.execute('''
                UPDATE users 
                SET has_paid = 0, payed_till = NULL
                WHERE user_id = ?
            ''', (user_id,))
            
            if cursor.rowcount == 0:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
                return False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                DELETE FROM paid_scheduled_messages 
                WHERE user_id = ? AND is_sent = 0
            ''', (user_id,))
            
            cancelled_paid_count = cursor.rowcount
            
            conn.commit()
            
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–º–µ–Ω–µ–Ω–æ {cancelled_paid_count} –ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                conn.rollback()
            except:
                pass
            return False
        finally:
            if conn:
                conn.close()
