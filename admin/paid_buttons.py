"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class PaidButtonsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    async def show_paid_message_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        buttons = self.db.get_paid_message_buttons(message_number)
        
        keyboard = []
        
        for button_id, button_text, button_url, position in buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_paid_button_{button_id}")])
        
        if len(buttons) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"add_paid_button_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"edit_paid_msg_{message_number}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üí∞ <b>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö {message_number}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(buttons)}/3\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_paid_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT message_number, button_text, button_url 
            FROM paid_message_buttons 
            WHERE id = ?
        ''', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        message_number, button_text, button_url = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_paid_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_paid_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_paid_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"manage_paid_buttons_{message_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def handle_add_paid_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫ –ø–ª–∞—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if len(text) > 64:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ URL
            self.waiting_for[user_id]["button_text"] = text
            self.waiting_for[user_id]["step"] = "url"
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{text}</b>\n\n"
                f"üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä: https://example.com\n"
                f"üéØ UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='HTML'
            )
            
        elif current_step == "url":
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º URL –∫–Ω–æ–ø–∫–∏
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            if len(text) > 256:
                await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_number = waiting_data["message_number"]
            button_text = waiting_data["button_text"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            existing_buttons = self.db.get_paid_message_buttons(message_number)
            position = len(existing_buttons) + 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ë–î
            self.db.add_paid_message_button(message_number, button_text, text, position)
            
            await update.message.reply_text(
                f"‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
                f"üîó <b>URL:</b> {text}\n\n"
                f"üéØ <b>UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>",
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del self.waiting_for[user_id]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
            await self.show_paid_message_buttons_from_context(update, context, message_number)
    
    async def show_paid_message_buttons_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        buttons = self.db.get_paid_message_buttons(message_number)
        
        keyboard = []
        
        for button_id, button_text, button_url, position in buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_paid_button_{button_id}")])
        
        if len(buttons) < 3:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"add_paid_button_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"edit_paid_msg_{message_number}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üí∞ <b>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö {message_number}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(buttons)}/3\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
