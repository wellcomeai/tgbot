"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
import asyncio

logger = logging.getLogger(__name__)


class BroadcastsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    async def show_broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
        messages = self.db.get_all_broadcast_messages()
        
        keyboard = []
        for msg_num, text, delay_hours, photo_url in messages:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            buttons = self.db.get_message_buttons(msg_num)
            button_icon = f"üîò{len(buttons)}" if buttons else ""
            photo_icon = "üñº" if photo_url else ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            delay_str = self.format_delay_display(delay_hours)
            
            button_text = f"{photo_icon}{button_icon} –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ({delay_str})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_msg_{msg_num}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚úâÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_broadcast_menu_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        messages = self.db.get_all_broadcast_messages()
        
        keyboard = []
        for msg_num, text, delay_hours, photo_url in messages:
            buttons = self.db.get_message_buttons(msg_num)
            button_icon = f"üîò{len(buttons)}" if buttons else ""
            photo_icon = "üñº" if photo_url else ""
            
            delay_str = self.format_delay_display(delay_hours)
            
            button_text = f"{photo_icon}{button_icon} –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ({delay_str})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_msg_{msg_num}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úâÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_broadcast_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcast_status = self.db.get_broadcast_status()
        
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if broadcast_status['enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        text = f"üîÑ <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        
        if not broadcast_status['enabled'] and broadcast_status['auto_resume_time']:
            resume_time = datetime.fromisoformat(broadcast_status['auto_resume_time'])
            text += f"<b>–ê–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {resume_time.strftime('%d.%m.%Y %H:%M')}\n"
        
        keyboard = []
        
        if broadcast_status['enabled']:
            keyboard.append([InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="disable_broadcast")])
        else:
            keyboard.append([InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="enable_broadcast")])
            keyboard.append([InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="set_broadcast_timer")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        msg_data = self.db.get_broadcast_message(message_number)
        if not msg_data:
            await update.callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        text, delay_hours, photo_url = msg_data
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{message_number}")],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data=f"edit_delay_{message_number}")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{message_number}")]
        ]
        
        if photo_url:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_photo_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data=f"manage_buttons_{message_number}")])
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_msg_{message_number}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if buttons:
            buttons_info = f"\n<b>–ö–Ω–æ–ø–∫–∏ ({len(buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        delay_str = self.format_delay_display_full(delay_hours)
        
        message_text = (
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ {message_number}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay_str} –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if photo_url else '–ù–µ—Ç'}"
            f"{buttons_info}\n\n"
            f"üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_message_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        msg_data = self.db.get_broadcast_message(message_number)
        if not msg_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        text, delay_hours, photo_url = msg_data
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{message_number}")],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data=f"edit_delay_{message_number}")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{message_number}")]
        ]
        
        if photo_url:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_photo_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data=f"manage_buttons_{message_number}")])
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_msg_{message_number}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if buttons:
            buttons_info = f"\n<b>–ö–Ω–æ–ø–∫–∏ ({len(buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        delay_str = self.format_delay_display_full(delay_hours)
        
        message_text = (
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ {message_number}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay_str} –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if photo_url else '–ù–µ—Ç'}"
            f"{buttons_info}\n\n"
            f"üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_scheduled_broadcasts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcasts = self.db.get_scheduled_broadcasts(include_sent=False)
        
        keyboard = []
        
        if broadcasts:
            for broadcast_id, message_text, photo_url, scheduled_time, is_sent, created_at in broadcasts:
                scheduled_dt = datetime.fromisoformat(scheduled_time)
                time_str = scheduled_dt.strftime("%d.%m %H:%M")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
                buttons = self.db.get_scheduled_broadcast_buttons(broadcast_id)
                button_icon = f"üîò{len(buttons)}" if buttons else ""
                photo_icon = "üñº" if photo_url else ""
                
                short_text = message_text[:20] + "..." if len(message_text) > 20 else message_text
                button_display = f"{photo_icon}{button_icon} {time_str}: {short_text}"
                keyboard.append([InlineKeyboardButton(button_display, callback_data=f"edit_scheduled_broadcast_{broadcast_id}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {len(broadcasts)}\n\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def handle_broadcast_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        try:
            hours = float(text)
            if hours < 1:
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            
            resume_time = datetime.now() + timedelta(hours=hours)
            self.db.set_broadcast_status(False, resume_time.isoformat())
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ {hours} —á–∞—Å–æ–≤. –ê–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {resume_time.strftime('%d.%m.%Y %H:%M')}"
            )
            
            del self.waiting_for[user_id]
            await asyncio.sleep(2)
            await self.show_main_menu_safe(update, context)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–±–æ–ª—å—à–µ 0)")
    
    async def handle_add_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        if len(text) > 4096:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            self.waiting_for[user_id]["text"] = text
            self.waiting_for[user_id]["step"] = "delay"
            await update.message.reply_text(
                "‚è∞ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É:\n\n"
                "üìù <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n"
                "‚Ä¢ <code>30–º</code> –∏–ª–∏ <code>30 –º–∏–Ω—É—Ç</code> - –¥–ª—è –º–∏–Ω—É—Ç\n"
                "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code> - –¥–ª—è —á–∞—Å–æ–≤\n"
                "‚Ä¢ <code>1.5</code> - –¥–ª—è 1.5 —á–∞—Å–æ–≤\n"
                "‚Ä¢ <code>0.05</code> - –¥–ª—è 3 –º–∏–Ω—É—Ç",
                parse_mode='HTML'
            )
        elif current_step == "delay":
            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay_hours, delay_display = self.parse_delay_input(text)
            
            if delay_hours is not None and delay_hours > 0:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = waiting_data["text"]
                new_number = self.db.add_broadcast_message(message_text, delay_hours)
                
                await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {new_number} –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_display}!")
                del self.waiting_for[user_id]
                await self.show_broadcast_menu_from_context(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n\n"
                    "‚Ä¢ <code>3–º</code> –∏–ª–∏ <code>3 –º–∏–Ω—É—Ç—ã</code>\n"
                    "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code>\n"
                    "‚Ä¢ <code>1.5</code> (–¥–ª—è 1.5 —á–∞—Å–æ–≤)\n"
                    "‚Ä¢ <code>0.05</code> (–¥–ª—è 3 –º–∏–Ω—É—Ç)",
                    parse_mode='HTML'
                )
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step='{current_step}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.waiting_for:
                del self.waiting_for[user_id]
    
    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def handle_additional_callbacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
        query = update.callback_query
        data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏
        if data.startswith("edit_text_"):
            message_number = int(data.split("_")[2])
            await self.request_text_input(update, context, "broadcast_text", message_number=message_number)
        elif data.startswith("edit_delay_"):
            message_number = int(data.split("_")[2])
            await self.request_text_input(update, context, "broadcast_delay", message_number=message_number)
        elif data.startswith("edit_photo_"):
            message_number = int(data.split("_")[2])
            await self.request_text_input(update, context, "broadcast_photo", message_number=message_number)
        elif data.startswith("remove_photo_"):
            message_number = int(data.split("_")[2])
            self.db.update_broadcast_message(message_number, photo_url="")
            await self.show_message_edit(update, context, message_number)
        elif data.startswith("delete_msg_"):
            message_number = int(data.split("_")[2])
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{message_number}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_msg_{message_number}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.safe_edit_or_send_message(
                update, context,
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number}?\n\n–≠—Ç–æ —Ç–∞–∫–∂–µ –æ—Ç–º–µ–Ω–∏—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup
            )
        elif data.startswith("confirm_delete_"):
            message_number = int(data.split("_")[2])
            self.db.delete_broadcast_message(message_number)
            await self.show_broadcast_menu(update, context)
        elif data == "add_message":
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = update.callback_query.from_user.id
            self.waiting_for[user_id] = {
                "type": "add_message", 
                "created_at": datetime.now(), 
                "step": "text"
            }
            
            await self.safe_edit_or_send_message(
                update, context,
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast")]])
            )
        elif data.startswith("add_button_"):
            message_number = int(data.split("_")[2])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫
            existing_buttons = self.db.get_message_buttons(message_number)
            if len(existing_buttons) >= 3:
                await query.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏
            user_id = update.callback_query.from_user.id
            self.waiting_for[user_id] = {
                "type": "add_button", 
                "message_number": message_number,
                "step": "text",
                "created_at": datetime.now()
            }
            
            await self.safe_edit_or_send_message(
                update, context,
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
                InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_buttons_{message_number}")]])
            )
        else:
            return False  # –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        return True  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
