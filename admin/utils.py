"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import re
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class UtilsMixin:
    """–ú–∏–∫—Å–∏–Ω —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    def parse_delay_input(self, text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        text = text.strip().lower()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–Ω—É—Ç–∞–º–∏
            if '–º' in text or '–º–∏–Ω—É—Ç' in text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
                match = re.search(r'(\d+(?:\.\d+)?)', text)
                if match:
                    minutes = float(match.group(1))
                    hours = minutes / 60
                    return hours, f"{int(minutes)} –º–∏–Ω—É—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —á–∞—Å–∞–º–∏
            elif '—á' in text or '—á–∞—Å' in text:
                match = re.search(r'(\d+(?:\.\d+)?)', text)
                if match:
                    hours = float(match.group(1))
                    return hours, f"{hours} —á–∞—Å–æ–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (—Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∞—Å—ã)
            else:
                hours = float(text)
                if hours < 1:
                    minutes = int(hours * 60)
                    return hours, f"{minutes} –º–∏–Ω—É—Ç"
                else:
                    return hours, f"{hours} —á–∞—Å–æ–≤"
                    
        except ValueError:
            return None, None
        
        return None, None
    
    def parse_hours_input(self, text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
        text = text.strip().lower()
        
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            text_clean = text.replace(' ', '')
            
            # –§–æ—Ä–º–∞—Ç—ã: 1—á, 2—á, 3—á–∞—Å, 4—á–∞—Å–∞, 5—á–∞—Å–æ–≤
            if '—á' in text_clean:
                match = re.search(r'(\d+(?:\.\d+)?)', text_clean)
                if match:
                    hours = float(match.group(1))
                    return hours, f"{hours} —á–∞—Å(–æ–≤)"
            
            # –§–æ—Ä–º–∞—Ç—ã: —á–∞—Å, —á–∞—Å–∞, —á–∞—Å–æ–≤ —Å —á–∏—Å–ª–æ–º
            elif any(word in text for word in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']):
                match = re.search(r'(\d+(?:\.\d+)?)', text)
                if match:
                    hours = float(match.group(1))
                    return hours, f"{hours} —á–∞—Å(–æ–≤)"
            
            # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∞—Å—ã
            else:
                hours = float(text)
                return hours, f"{hours} —á–∞—Å(–æ–≤)"
                    
        except ValueError:
            return None, None
        
        return None, None
    
    def validate_waiting_state(self, waiting_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ"""
        if not waiting_data or "type" not in waiting_data:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (30 –º–∏–Ω—É—Ç)
        created_at = waiting_data.get("created_at")
        if created_at and (datetime.now() - created_at).total_seconds() > 1800:
            return False
        
        return True
    
    def _get_delay_text(self, message_number):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        return (
            f"‚è∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}:\n\n"
            f"üìù <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n"
            f"‚Ä¢ <code>30–º</code> –∏–ª–∏ <code>30 –º–∏–Ω—É—Ç</code> - –¥–ª—è –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code> - –¥–ª—è —á–∞—Å–æ–≤\n"
            f"‚Ä¢ <code>1.5</code> - –¥–ª—è 1.5 —á–∞—Å–æ–≤\n"
            f"‚Ä¢ <code>0.05</code> - –¥–ª—è 3 –º–∏–Ω—É—Ç\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä—ã: <code>3–º</code>, <code>30 –º–∏–Ω—É—Ç</code>, <code>2—á</code>, <code>1.5</code>"
        )
    
    def format_delay_display(self, delay_hours):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if delay_hours < 1:
            delay_str = f"{int(delay_hours * 60)}–º"
        else:
            delay_str = f"{delay_hours}—á"
        return delay_str
    
    def format_delay_display_full(self, delay_hours):
        """–ü–æ–ª–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if delay_hours < 1:
            delay_str = f"{int(delay_hours * 60)} –º–∏–Ω—É—Ç"
        else:
            delay_str = f"{delay_hours} —á–∞—Å–æ–≤"
        return delay_str
