"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class ButtonsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤"""
    
    # === –ö–ù–û–ü–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –†–ê–°–°–´–õ–ö–ò ===
    
    async def show_message_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = []
        
        for button_id, button_text, button_url, position in buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_button_{button_id}")])
        
        if len(buttons) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"add_button_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"edit_msg_{message_number}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(buttons)}/3\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_message_buttons_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏"""
        user_id = update.effective_user.id
        
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = []
        
        for button_id, button_text, button_url, position in buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_button_{button_id}")])
        
        if len(buttons) < 3:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"add_button_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"edit_msg_{message_number}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üîò <b>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(buttons)}/3\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT message_number, button_text, button_url 
            FROM message_buttons 
            WHERE id = ?
        ''', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        message_number, button_text, button_url = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"manage_buttons_{message_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_button_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT message_number, button_text, button_url 
            FROM message_buttons 
            WHERE id = ?
        ''', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        message_number, button_text, button_url = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"manage_buttons_{message_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # === –ö–ù–û–ü–ö–ò –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø ===
    
    async def show_welcome_buttons_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = []
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for button_id, button_text, position in welcome_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_welcome_button_{button_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ª–∏–º–∏—Ç 5 –∫–Ω–æ–ø–æ–∫)
        if len(welcome_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_welcome_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_welcome")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(welcome_buttons)}/5\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_welcome_buttons_management_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = []
        
        for button_id, button_text, position in welcome_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_welcome_button_{button_id}")])
        
        if len(welcome_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_welcome_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_welcome")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(welcome_buttons)}/5\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_welcome_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, position FROM welcome_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_id, button_text, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_welcome_button_text_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_welcome_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_welcome_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_welcome_button_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, position FROM welcome_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        button_id, button_text, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_welcome_button_text_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_welcome_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_welcome_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_welcome_button_delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT button_text FROM welcome_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_text = button_data[0]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_welcome_button_{button_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_welcome_button_{button_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É:\n"
            f'<b>"{button_text}"</b>?'
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # === –ö–ù–û–ü–ö–ò –ü–†–û–©–ê–õ–¨–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø ===
    
    async def show_goodbye_buttons_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = []
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for button_id, button_text, button_url, position in goodbye_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_goodbye_button_{button_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ª–∏–º–∏—Ç 5 –∫–Ω–æ–ø–æ–∫)
        if len(goodbye_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_goodbye_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_goodbye")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(goodbye_buttons)}/5\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_goodbye_buttons_management_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ—â–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = []
        
        for button_id, button_text, button_url, position in goodbye_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_goodbye_button_{button_id}")])
        
        if len(goodbye_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_goodbye_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_goodbye")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(goodbye_buttons)}/5\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_goodbye_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, button_url, position FROM goodbye_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_id, button_text, button_url, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_goodbye_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_goodbye_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_goodbye_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_goodbye_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_goodbye_button_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, button_url, position FROM goodbye_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        button_id, button_text, button_url, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_goodbye_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_goodbye_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_goodbye_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_goodbye_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_goodbye_button_delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT button_text FROM goodbye_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_text = button_data[0]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_goodbye_button_{button_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_goodbye_button_{button_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É:\n"
            f'<b>"{button_text}"</b>?'
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–í–û–î–ê ===
    
    async def handle_add_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if len(text) > 64:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ URL
            self.waiting_for[user_id]["button_text"] = text
            self.waiting_for[user_id]["step"] = "url"
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{text}</b>\n\n"
                f"üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä: https://example.com\n"
                f"üéØ UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='HTML'
            )
            
        elif current_step == "url":
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º URL –∫–Ω–æ–ø–∫–∏
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            if len(text) > 256:
                await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_number = waiting_data["message_number"]
            button_text = waiting_data["button_text"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            existing_buttons = self.db.get_message_buttons(message_number)
            position = len(existing_buttons) + 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ë–î
            self.db.add_message_button(message_number, button_text, text, position)
            
            await update.message.reply_text(
                f"‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
                f"üîó <b>URL:</b> {text}\n\n"
                f"üéØ <b>UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>",
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del self.waiting_for[user_id]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
            await self.show_message_buttons_from_context(update, context, message_number)
            
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step='{current_step}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.waiting_for:
                del self.waiting_for[user_id]
    
    async def handle_add_welcome_button_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        user_id = update.effective_user.id
        
        if len(text) > 30:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        existing_button = self.db.get_welcome_button_by_text(text)
        if existing_button:
            await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        button_id = self.db.add_welcome_button(text)
        
        await update.message.reply_text(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await self.show_welcome_buttons_management_from_context(update, context)
    
    async def handle_edit_welcome_button_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        user_id = update.effective_user.id
        button_id = self.waiting_for[user_id]["button_id"]
        
        if len(text) > 30:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É)
        existing_button = self.db.get_welcome_button_by_text(text)
        if existing_button and existing_button[0] != button_id:
            await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.db.update_welcome_button(button_id, button_text=text)
        
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        await self.show_welcome_button_edit_from_context(update, context, button_id)
    
    async def handle_add_goodbye_button_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è (–≤ –¥–≤–∞ —ç—Ç–∞–ø–∞)"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if len(text) > 64:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ URL
            self.waiting_for[user_id]["button_text"] = text
            self.waiting_for[user_id]["step"] = "url"
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{text}</b>\n\n"
                f"üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä: https://example.com\n"
                f"üéØ UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='HTML'
            )
            
        elif current_step == "url":
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º URL –∫–Ω–æ–ø–∫–∏
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            if len(text) > 256:
                await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                return
            
            button_text = waiting_data["button_text"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
            existing_button = self.db.get_goodbye_button_by_text(button_text)
            if existing_button:
                await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                del self.waiting_for[user_id]
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            button_id = self.db.add_goodbye_button(button_text, text)
            
            await update.message.reply_text(
                f"‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
                f"üîó <b>URL:</b> {text}\n\n"
                f"üéØ <b>UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>",
                parse_mode='HTML'
            )
            
            del self.waiting_for[user_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            await self.show_goodbye_buttons_management_from_context(update, context)
        
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step='{current_step}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.waiting_for:
                del self.waiting_for[user_id]
    
    async def handle_edit_goodbye_button_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        button_id = self.waiting_for[user_id]["button_id"]
        
        if len(text) > 64:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É)
        existing_button = self.db.get_goodbye_button_by_text(text)
        if existing_button and existing_button[0] != button_id:
            await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.db.update_goodbye_button(button_id, button_text=text)
        
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        await self.show_goodbye_button_edit_from_context(update, context, button_id)
    
    async def handle_edit_goodbye_button_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        button_id = self.waiting_for[user_id]["button_id"]
        
        if not (text.startswith("http://") or text.startswith("https://")):
            await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        if len(text) > 256:
            await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        self.db.update_goodbye_button(button_id, button_url=text)
        
        await update.message.reply_text("‚úÖ URL –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        await self.show_goodbye_button_edit_from_context(update, context, button_id)
