"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging

logger = logging.getLogger(__name__)


class MenuMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é"""
    
    def build_keyboard(self, buttons_config: list) -> InlineKeyboardMarkup:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
        
        Args:
            buttons_config: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                          —Å –∫–ª—é—á–∞–º–∏ 'text' –∏ 'callback_data'
        
        Example:
            buttons_config = [
                [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"}],
                [
                    {"text": "‚úÖ –î–∞", "callback_data": "confirm_yes"},
                    {"text": "‚ùå –ù–µ—Ç", "callback_data": "confirm_no"}
                ]
            ]
        """
        keyboard = []
        
        for button_row in buttons_config:
            row = []
            for button in button_row:
                if isinstance(button, dict) and 'text' in button and 'callback_data' in button:
                    row.append(InlineKeyboardButton(button['text'], callback_data=button['callback_data']))
                elif isinstance(button, dict) and 'text' in button and 'url' in button:
                    row.append(InlineKeyboardButton(button['text'], url=button['url']))
            
            if row:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                keyboard.append(row)
        
        return InlineKeyboardMarkup(keyboard)
    
    def create_back_button(self, callback_data: str = "admin_back") -> list:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        return [{"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": callback_data}]
    
    def create_cancel_button(self, callback_data: str = "admin_back") -> list:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã"""
        return [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": callback_data}]
    
    def create_confirm_buttons(self, confirm_data: str, cancel_data: str) -> list:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã"""
        return [
            {"text": "‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å", "callback_data": confirm_data},
            {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": cancel_data}
        ]
    
    def create_pagination_buttons(self, current_page: int, total_pages: int, 
                                prefix: str = "page") -> list:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        Args:
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        """
        buttons = []
        
        if total_pages <= 1:
            return buttons
        
        # –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–∑–∞–¥
        if current_page > 1:
            buttons.append({"text": "‚óÄÔ∏è", "callback_data": f"{prefix}_{current_page - 1}"})
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        buttons.append({"text": f"{current_page}/{total_pages}", "callback_data": "noop"})
        
        # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø–µ—Ä–µ–¥
        if current_page < total_pages:
            buttons.append({"text": "‚ñ∂Ô∏è", "callback_data": f"{prefix}_{current_page + 1}"})
        
        return buttons
    
    def format_message_with_header(self, title: str, content: str, 
                                 footer: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            content: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            footer: –ü–æ–¥–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        message = f"<b>{title}</b>\n\n{content}"
        
        if footer:
            message += f"\n\n{footer}"
        
        return message
    
    def format_status_text(self, status: bool, enabled_text: str = "–í–∫–ª—é—á–µ–Ω–æ", 
                          disabled_text: str = "–û—Ç–∫–ª—é—á–µ–Ω–æ") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
        if status:
            return f"üü¢ {enabled_text}"
        else:
            return f"üî¥ {disabled_text}"
    
    def format_count_text(self, count: int, singular: str, plural: str, 
                         genitive: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            singular: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            plural: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è 2-4 (2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            genitive: –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –¥–ª—è 5+ (5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        """
        if genitive is None:
            genitive = plural
        
        if count % 10 == 1 and count % 100 != 11:
            return f"{count} {singular}"
        elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
            return f"{count} {plural}"
        else:
            return f"{count} {genitive}"
    
    def format_list_items(self, items: list, emoji: str = "‚Ä¢", 
                         max_items: int = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã)
        """
        if not items:
            return "<i>–ü—É—Å—Ç–æ</i>"
        
        display_items = items[:max_items] if max_items else items
        formatted_items = [f"{emoji} {item}" for item in display_items]
        
        result = "\n".join(formatted_items)
        
        if max_items and len(items) > max_items:
            remaining = len(items) - max_items
            result += f"\n<i>... –∏ –µ—â–µ {remaining}</i>"
        
        return result
    
    def create_toggle_button(self, current_state: bool, true_text: str, 
                           false_text: str, callback_prefix: str) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            true_text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è True
            false_text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è False
            callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        """
        if current_state:
            return {
                "text": f"üî¥ {false_text}",
                "callback_data": f"{callback_prefix}_disable"
            }
        else:
            return {
                "text": f"üü¢ {true_text}",
                "callback_data": f"{callback_prefix}_enable"
            }
    
    def create_edit_buttons(self, item_id: int, prefix: str) -> list:
        """
        –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            item_id: ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        """
        return [
            [
                {"text": "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"edit_{prefix}_{item_id}"},
                {"text": "üóë –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_{prefix}_{item_id}"}
            ]
        ]
    
    def create_management_menu(self, items: list, item_formatter, 
                             add_callback: str, back_callback: str = "admin_back",
                             max_items: int = 10) -> tuple:
        """
        –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            item_formatter: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–Ω–æ–ø–∫—É
            add_callback: Callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            back_callback: Callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
            max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Returns:
            tuple: (keyboard, summary_text)
        """
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        display_items = items[:max_items]
        for item in display_items:
            button = item_formatter(item)
            if button:
                keyboard.append([button])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "callback_data": add_callback}])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append(self.create_back_button(back_callback))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        total_count = len(items)
        shown_count = len(display_items)
        
        if total_count > max_items:
            summary = f"–ü–æ–∫–∞–∑–∞–Ω–æ {shown_count} –∏–∑ {total_count}"
        else:
            summary = f"–í—Å–µ–≥–æ: {total_count}"
        
        return InlineKeyboardMarkup(keyboard), summary
    
    def format_datetime_display(self, dt, format_str: str = "%d.%m.%Y %H:%M") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if isinstance(dt, str):
            from datetime import datetime
            dt = datetime.fromisoformat(dt)
        
        return dt.strftime(format_str)
    
    def truncate_text(self, text: str, max_length: int = 50, 
                     suffix: str = "...") -> str:
        """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(text) <= max_length:
            return text
        
        return text[:max_length - len(suffix)] + suffix
