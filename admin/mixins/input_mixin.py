"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class InputMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º"""
    
    async def request_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                input_type, **kwargs):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        user_id = update.callback_query.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if input_type == "add_button":
            self.waiting_for[user_id] = {
                "type": input_type, 
                "created_at": datetime.now(), 
                "step": "text",
                **kwargs
            }
        elif input_type == "add_goodbye_button":
            self.waiting_for[user_id] = {
                "type": input_type, 
                "created_at": datetime.now(), 
                "step": "text",
                **kwargs
            }
        else:
            self.waiting_for[user_id] = {"type": input_type, "created_at": datetime.now(), **kwargs}
        
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞
        texts = {
            "welcome": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "goodbye": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "success_message": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            "broadcast_text": f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {kwargs.get('message_number')}:",
            "broadcast_delay": self._get_delay_text(kwargs.get('message_number')),
            "broadcast_photo": f"üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {kwargs.get('message_number')} –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "welcome_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "goodbye_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "edit_button_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "edit_button_url": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "broadcast_timer": "‚è∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
            "add_message": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            "add_button": f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {kwargs.get('message_number')}:\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
            
            # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            "mass_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
            "mass_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "mass_time": "‚è∞ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–ü—Ä–∏–º–µ—Ä—ã: 1, 2.5, 24\n\n–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–π—á–∞—Å:",
            "mass_button_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "mass_button_url": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            
            # –ü–ª–∞—Ç–µ–∂–∏
            "payment_message_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n\nüí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {amount} - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.",
            "payment_message_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            
            # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "add_welcome_button": "‚å®Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:",
            "edit_welcome_button_text": "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            
            # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è
            "add_goodbye_button": "üîò –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è:\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
            "edit_goodbye_button_text": "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "edit_goodbye_button_url": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
        }
        
        text = texts.get(input_type, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_send_all")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def handle_photo_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, waiting_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        input_type = waiting_data["type"]
        
        if input_type == "mass_photo":
            # –§–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            photo_file_id = update.message.photo[-1].file_id
            
            if user_id not in self.broadcast_drafts:
                self.broadcast_drafts[user_id] = {
                    "message_text": "",
                    "photo_data": None,
                    "buttons": [],
                    "scheduled_hours": None,
                    "created_at": datetime.now()
                }
            
            self.broadcast_drafts[user_id]["photo_data"] = photo_file_id
            
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            
            await self.show_send_all_menu_from_context(update, context)
        
        elif input_type == "payment_message_photo":
            # –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
            photo_file_id = update.message.photo[-1].file_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            current_data = self.db.get_payment_success_message()
            current_text = current_data['text'] if current_data else None
            
            if not current_text:
                current_text = (
                    "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                    "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                    "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                )
            
            self.db.set_payment_success_message(current_text, photo_file_id)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
        
        elif input_type == "broadcast_photo":
            # –§–æ—Ç–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            message_number = waiting_data["message_number"]
            photo_file_id = update.message.photo[-1].file_id
            
            self.db.update_broadcast_message(message_number, photo_url=photo_file_id)
            await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_message_edit_from_context(update, context, message_number)
        
        elif input_type == "welcome_photo":
            # –§–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            photo_file_id = update.message.photo[-1].file_id
            welcome_text = self.db.get_welcome_message()['text']
            self.db.set_welcome_message(welcome_text, photo_url=photo_file_id)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_welcome_edit_from_context(update, context)
        
        elif input_type == "goodbye_photo":
            # –§–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            photo_file_id = update.message.photo[-1].file_id
            goodbye_text = self.db.get_goodbye_message()['text']
            self.db.set_goodbye_message(goodbye_text, photo_url=photo_file_id)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_goodbye_edit_from_context(update, context)
        
        else:
            await self.show_error_message(update, context, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.")
    
    async def handle_photo_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   url: str, input_type: str, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        
        if input_type == "broadcast_photo":
            message_number = kwargs.get("message_number")
            self.db.update_broadcast_message(message_number, photo_url=url)
            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_message_edit_from_context(update, context, message_number)
        
        elif input_type == "welcome_photo":
            welcome_text = self.db.get_welcome_message()['text']
            self.db.set_welcome_message(welcome_text, photo_url=url)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_welcome_edit_from_context(update, context)
        
        elif input_type == "goodbye_photo":
            goodbye_text = self.db.get_goodbye_message()['text']
            self.db.set_goodbye_message(goodbye_text, photo_url=url)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_goodbye_edit_from_context(update, context)
        
        elif input_type == "payment_message_photo":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            current_data = self.db.get_payment_success_message()
            current_text = current_data['text'] if current_data else None
            
            if not current_text:
                current_text = (
                    "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                    "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                    "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                )
            
            self.db.set_payment_success_message(current_text, url)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
        
        elif input_type == "mass_photo":
            if user_id not in self.broadcast_drafts:
                self.broadcast_drafts[user_id] = {
                    "message_text": "",
                    "photo_data": None,
                    "buttons": [],
                    "scheduled_hours": None,
                    "created_at": datetime.now()
                }
            
            self.broadcast_drafts[user_id]["photo_data"] = url
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_send_all_menu_from_context(update, context)
