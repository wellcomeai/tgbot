"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class InputMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º"""
    
    async def handle_photo_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, waiting_data: dict):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –í–°–ï–• —Ç–∏–ø–æ–≤"""
        user_id = update.effective_user.id
        input_type = waiting_data["type"]
        
        try:
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º file_id –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ URL
            photo = update.message.photo[-1]
            photo_file_id = photo.file_id
            
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω file_id —Ñ–æ—Ç–æ ({input_type}): {photo_file_id}")
            
            # === –ë–ê–ó–û–í–´–ï –¢–ò–ü–´ ===
            if input_type == "welcome_photo":
                welcome_text = self.db.get_welcome_message()['text']
                self.db.set_welcome_message(welcome_text, photo_file_id)
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_welcome_edit_from_context(update, context)
                
            elif input_type == "goodbye_photo":
                goodbye_text = self.db.get_goodbye_message()['text']
                self.db.set_goodbye_message(goodbye_text, photo_file_id)
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—â–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_goodbye_edit_from_context(update, context)
                
            elif input_type == "renewal_photo":
                self.db.set_renewal_message(photo_url=photo_file_id)
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_renewal_edit_from_context(update, context)
            
            # === –¢–ò–ü–´ –î–õ–Ø –ú–ê–°–°–û–í–´–• –†–ê–°–°–´–õ–û–ö ===
            elif input_type == "mass_photo":
                if user_id not in self.broadcast_drafts:
                    self.broadcast_drafts[user_id] = {
                        "message_text": "",
                        "photo_data": None,
                        "buttons": [],
                        "scheduled_hours": None,
                        "created_at": datetime.now()
                    }
                
                self.broadcast_drafts[user_id]["photo_data"] = photo_file_id
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_send_all_menu_from_context(update, context)
            
            elif input_type == "paid_mass_photo":
                if user_id not in self.broadcast_drafts:
                    self.broadcast_drafts[user_id] = {
                        "message_text": "",
                        "photo_data": None,
                        "buttons": [],
                        "scheduled_hours": None,
                        "created_at": datetime.now(),
                        "is_paid_broadcast": True
                    }
                
                self.broadcast_drafts[user_id]["photo_data"] = photo_file_id
                self.broadcast_drafts[user_id]["is_paid_broadcast"] = True
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_paid_send_all_menu_from_context(update, context)
            
            # === –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–ü–õ–ê–¢–ï ===
            elif input_type == "payment_message_photo":
                current_data = self.db.get_payment_success_message()
                current_text = current_data['text'] if current_data else self._get_default_payment_message()
                
                self.db.set_payment_success_message(current_text, photo_file_id)
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_payment_message_edit_from_context(update, context)
            
            # === –§–û–¢–û –î–õ–Ø –û–°–ù–û–í–ù–û–ô –í–û–†–û–ù–ö–ò ===
            elif input_type == "broadcast_photo":
                message_number = waiting_data["message_number"]
                self.db.update_broadcast_message(message_number, photo_url=photo_file_id)
                await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_message_edit_from_context(update, context, message_number)
            
            # === –§–û–¢–û –î–õ–Ø –ü–õ–ê–¢–ù–û–ô –í–û–†–û–ù–ö–ò ===
            elif input_type == "paid_broadcast_photo":
                message_number = waiting_data["message_number"]
                self.db.update_paid_broadcast_message(message_number, photo_url=photo_file_id)
                await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_paid_message_edit_from_context(update, context, message_number)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ: {input_type}")
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ.")
                if user_id in self.waiting_for:
                    del self.waiting_for[user_id]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_photo_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   url: str, input_type: str, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        user_id = update.effective_user.id
        
        try:
            # === –ë–ê–ó–û–í–´–ï –¢–ò–ü–´ ===
            if input_type == "welcome_photo":
                welcome_text = self.db.get_welcome_message()['text']
                self.db.set_welcome_message(welcome_text, url)
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_welcome_edit_from_context(update, context)
                
            elif input_type == "goodbye_photo":
                goodbye_text = self.db.get_goodbye_message()['text']
                self.db.set_goodbye_message(goodbye_text, url)
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—â–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_goodbye_edit_from_context(update, context)
                
            elif input_type == "renewal_photo":
                self.db.set_renewal_message(photo_url=url)
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_renewal_edit_from_context(update, context)
            
            # === –û–°–ù–û–í–ù–ê–Ø –í–û–†–û–ù–ö–ê ===
            elif input_type == "broadcast_photo":
                message_number = kwargs.get("message_number")
                self.db.update_broadcast_message(message_number, photo_url=url)
                await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_message_edit_from_context(update, context, message_number)
            
            # === –ü–õ–ê–¢–ù–ê–Ø –í–û–†–û–ù–ö–ê ===
            elif input_type == "paid_broadcast_photo":
                message_number = kwargs.get("message_number")
                self.db.update_paid_broadcast_message(message_number, photo_url=url)
                await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_paid_message_edit_from_context(update, context, message_number)
            
            # === –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–ü–õ–ê–¢–ï ===
            elif input_type == "payment_message_photo":
                current_data = self.db.get_payment_success_message()
                current_text = current_data['text'] if current_data else self._get_default_payment_message()
                
                self.db.set_payment_success_message(current_text, url)
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_payment_message_edit_from_context(update, context)
            
            # === –ú–ê–°–°–û–í–´–ï –†–ê–°–°–´–õ–ö–ò ===
            elif input_type == "mass_photo":
                if user_id not in self.broadcast_drafts:
                    self.broadcast_drafts[user_id] = {
                        "message_text": "",
                        "photo_data": None,
                        "buttons": [],
                        "scheduled_hours": None,
                        "created_at": datetime.now()
                    }
                
                self.broadcast_drafts[user_id]["photo_data"] = url
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_send_all_menu_from_context(update, context)
            
            elif input_type == "paid_mass_photo":
                if user_id not in self.broadcast_drafts:
                    self.broadcast_drafts[user_id] = {
                        "message_text": "",
                        "photo_data": None,
                        "buttons": [],
                        "scheduled_hours": None,
                        "created_at": datetime.now(),
                        "is_paid_broadcast": True
                    }
                
                self.broadcast_drafts[user_id]["photo_data"] = url
                self.broadcast_drafts[user_id]["is_paid_broadcast"] = True
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                del self.waiting_for[user_id]
                await self.show_paid_send_all_menu_from_context(update, context)
            
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø URL —Ñ–æ—Ç–æ: {input_type}")
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞ URL —Ñ–æ—Ç–æ.")
                if user_id in self.waiting_for:
                    del self.waiting_for[user_id]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ URL —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _get_default_payment_message(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ"""
        return (
            "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
            "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
            "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
            "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
        )
