"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
import asyncio

logger = logging.getLogger(__name__)


class PaidBroadcastsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    async def show_paid_broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        messages = self.db.get_all_paid_broadcast_messages()
        
        keyboard = []
        for msg_num, text, delay_hours, photo_url in messages:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            buttons = self.db.get_paid_message_buttons(msg_num)
            button_icon = f"üîò{len(buttons)}" if buttons else ""
            photo_icon = "üñº" if photo_url else ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            delay_str = self.format_delay_display(delay_hours)
            
            button_text = f"{photo_icon}{button_icon} –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ({delay_str})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_paid_msg_{msg_num}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_paid_message")])
        keyboard.append([InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="paid_send_all")])
        keyboard.append([InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="paid_scheduled_broadcasts")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üí∞ <b>–†–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö</b>\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_paid_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        msg_data = self.db.get_paid_broadcast_message(message_number)
        if not msg_data:
            await update.callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        text, delay_hours, photo_url = msg_data
        buttons = self.db.get_paid_message_buttons(message_number)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_paid_text_{message_number}")],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data=f"edit_paid_delay_{message_number}")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_paid_photo_{message_number}")]
        ]
        
        if photo_url:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_paid_photo_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data=f"manage_paid_buttons_{message_number}")])
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_paid_msg_{message_number}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_paid_broadcast")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if buttons:
            buttons_info = f"\n<b>–ö–Ω–æ–ø–∫–∏ ({len(buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        delay_str = self.format_delay_display_full(delay_hours)
        
        message_text = (
            f"üí∞ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö {message_number}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay_str} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if photo_url else '–ù–µ—Ç'}"
            f"{buttons_info}\n\n"
            f"üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_paid_send_all_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now(),
                "is_paid_broadcast": True  # –§–ª–∞–≥ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        self.broadcast_drafts[user_id]["is_paid_broadcast"] = True
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id in self.waiting_for:
            del self.waiting_for[user_id]
        
        draft = self.broadcast_drafts[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        text = "üí∞ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö</b>\n\n"
        
        # –¢–µ–∫—Å—Ç
        if draft["message_text"]:
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {draft['message_text'][:50]}{'...' if len(draft['message_text']) > 50 else ''}\n"
        else:
            text += "üìù <b>–¢–µ–∫—Å—Ç:</b> <i>–ù–µ –∑–∞–¥–∞–Ω</i>\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n"
        else:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ù–µ—Ç\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            text += f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(draft['buttons'])}\n"
        else:
            text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ù–µ—Ç\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <i>–°—Ä–∞–∑—É</i>\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        paid_users = self.db.get_users_with_payment()
        users_count = len(paid_users)
        text += f"\nüë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "\nüí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="paid_mass_edit_text")],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="paid_mass_add_photo")],
            [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="paid_mass_set_time")],
            [InlineKeyboardButton("üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="paid_mass_add_button")],
        ]
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["photo_data"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="paid_mass_remove_photo")])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["buttons"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É", callback_data="paid_mass_remove_button")])
        
        keyboard.append([InlineKeyboardButton("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="paid_mass_preview")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
        if draft["message_text"]:
            keyboard.append([InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="paid_mass_send_now")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_paid_broadcast")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_paid_scheduled_broadcasts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        broadcasts = self.db.get_paid_scheduled_broadcasts(include_sent=False)
        
        keyboard = []
        
        if broadcasts:
            for broadcast_id, message_text, photo_url, scheduled_time, is_sent, created_at in broadcasts:
                scheduled_dt = datetime.fromisoformat(scheduled_time)
                time_str = scheduled_dt.strftime("%d.%m %H:%M")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
                buttons = self.db.get_paid_scheduled_broadcast_buttons(broadcast_id)
                button_icon = f"üîò{len(buttons)}" if buttons else ""
                photo_icon = "üñº" if photo_url else ""
                
                short_text = message_text[:20] + "..." if len(message_text) > 20 else message_text
                button_display = f"{photo_icon}{button_icon} {time_str}: {short_text}"
                keyboard.append([InlineKeyboardButton(button_display, callback_data=f"edit_paid_scheduled_broadcast_{broadcast_id}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_paid_broadcast")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üí∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö</b>\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {len(broadcasts)}\n\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–í–û–î–ê ===
    
    async def handle_add_paid_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        if len(text) > 4096:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            self.waiting_for[user_id]["text"] = text
            self.waiting_for[user_id]["step"] = "delay"
            await update.message.reply_text(
                "‚è∞ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n\n"
                "üìù <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n"
                "‚Ä¢ <code>30–º</code> –∏–ª–∏ <code>30 –º–∏–Ω—É—Ç</code> - –¥–ª—è –º–∏–Ω—É—Ç\n"
                "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code> - –¥–ª—è —á–∞—Å–æ–≤\n"
                "‚Ä¢ <code>1.5</code> - –¥–ª—è 1.5 —á–∞—Å–æ–≤\n"
                "‚Ä¢ <code>0.05</code> - –¥–ª—è 3 –º–∏–Ω—É—Ç",
                parse_mode='HTML'
            )
        elif current_step == "delay":
            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay_hours, delay_display = self.parse_delay_input(text)
            
            if delay_hours is not None and delay_hours >= 0:  # –†–∞–∑—Ä–µ—à–∞–µ–º 0 –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = waiting_data["text"]
                new_number = self.db.add_paid_broadcast_message(message_text, delay_hours)
                
                await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö {new_number} –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_display}!")
                del self.waiting_for[user_id]
                await self.show_paid_broadcast_menu_from_context(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n\n"
                    "‚Ä¢ <code>3–º</code> –∏–ª–∏ <code>3 –º–∏–Ω—É—Ç—ã</code>\n"
                    "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code>\n"
                    "‚Ä¢ <code>1.5</code> (–¥–ª—è 1.5 —á–∞—Å–æ–≤)\n"
                    "‚Ä¢ <code>0</code> (–¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)",
                    parse_mode='HTML'
                )
    
    async def show_paid_broadcast_menu_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"""
        user_id = update.effective_user.id
        
        messages = self.db.get_all_paid_broadcast_messages()
        
        keyboard = []
        for msg_num, text, delay_hours, photo_url in messages:
            buttons = self.db.get_paid_message_buttons(msg_num)
            button_icon = f"üîò{len(buttons)}" if buttons else ""
            photo_icon = "üñº" if photo_url else ""
            
            delay_str = self.format_delay_display(delay_hours)
            
            button_text = f"{photo_icon}{button_icon} –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ({delay_str})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_paid_msg_{msg_num}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_paid_message")])
        keyboard.append([InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="paid_send_all")])
        keyboard.append([InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="paid_scheduled_broadcasts")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üí∞ <b>–†–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö</b>\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
