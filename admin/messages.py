"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class MessagesMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞"""
    
    # === –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===
    
    async def show_welcome_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_data = self.db.get_welcome_message()
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_welcome_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_welcome_photo")]
        ]
        
        if welcome_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_welcome_photo")])
        
        keyboard.append([InlineKeyboardButton("‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_welcome_buttons")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if welcome_buttons:
            buttons_info = f"\n\n<b>‚å®Ô∏è –ö–Ω–æ–ø–∫–∏ ({len(welcome_buttons)}):</b>\n"
            for i, (button_id, button_text, position) in enumerate(welcome_buttons, 1):
                buttons_info += f"{i}. {button_text}\n"
        
        message_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{welcome_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if welcome_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_welcome_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        user_id = update.effective_user.id
        welcome_data = self.db.get_welcome_message()
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_welcome_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_welcome_photo")]
        ]
        
        if welcome_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_welcome_photo")])
        
        keyboard.append([InlineKeyboardButton("‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_welcome_buttons")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if welcome_buttons:
            buttons_info = f"\n\n<b>‚å®Ô∏è –ö–Ω–æ–ø–∫–∏ ({len(welcome_buttons)}):</b>\n"
            for i, (button_id, button_text, position) in enumerate(welcome_buttons, 1):
                buttons_info += f"{i}. {button_text}\n"
        
        message_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{welcome_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if welcome_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # === –ü–†–û–©–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===
    
    async def show_goodbye_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        goodbye_data = self.db.get_goodbye_message()
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_goodbye_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_goodbye_photo")]
        ]
        
        if goodbye_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_goodbye_photo")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_goodbye_buttons")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if goodbye_buttons:
            buttons_info = f"\n\n<b>üîò –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ({len(goodbye_buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(goodbye_buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        message_text = (
            "üò¢ <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{goodbye_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if goodbye_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_goodbye_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—â–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        goodbye_data = self.db.get_goodbye_message()
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_goodbye_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_goodbye_photo")]
        ]
        
        if goodbye_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_goodbye_photo")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_goodbye_buttons")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if goodbye_buttons:
            buttons_info = f"\n\n<b>üîò –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ({len(goodbye_buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(goodbye_buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        message_text = (
            "üò¢ <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{goodbye_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if goodbye_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # === –°–û–û–ë–©–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø ===
    
    async def show_success_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM settings WHERE key = "success_message"')
        success_msg = cursor.fetchone()
        conn.close()
        
        if success_msg:
            current_message = success_msg[0]
        else:
            current_message = self._get_default_success_message()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_success_message_text")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_success_message")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_success_message_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM settings WHERE key = "success_message"')
        success_msg = cursor.fetchone()
        conn.close()
        
        if success_msg:
            current_message = success_msg[0]
        else:
            current_message = self._get_default_success_message()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_success_message_text")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_success_message")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # === –°–û–û–ë–©–ï–ù–ò–ï –ü–û–°–õ–ï –û–ü–õ–ê–¢–´ ===
    
    async def show_payment_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_message_data = self.db.get_payment_success_message()
        
        if payment_message_data and payment_message_data['text']:
            current_message = payment_message_data['text']
            current_photo = payment_message_data['photo_url']
        else:
            current_message = self._get_default_payment_message()
            current_photo = None
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_payment_message_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_payment_message_photo")]
        ]
        
        if current_photo:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_payment_message_photo")])
        
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_payment_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üí∞ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if current_photo else '–ù–µ—Ç'}\n\n"
            "üí° <i>–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {amount} - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_payment_message_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_message_data = self.db.get_payment_success_message()
        
        if payment_message_data and payment_message_data['text']:
            current_message = payment_message_data['text']
            current_photo = payment_message_data['photo_url']
        else:
            current_message = self._get_default_payment_message()
            current_photo = None
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_payment_message_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_payment_message_photo")]
        ]
        
        if current_photo:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_payment_message_photo")])
        
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_payment_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üí∞ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if current_photo else '–ù–µ—Ç'}\n\n"
            "üí° <i>–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {amount} - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.</i>"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–í–û–î–ê ===
    
    async def handle_payment_message_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         text: str, input_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        if input_type == "payment_message_text":
            if len(text) > 4096:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            current_data = self.db.get_payment_success_message()
            current_photo = current_data['photo_url'] if current_data else None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            self.db.set_payment_success_message(text, current_photo)
            
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
            
        elif input_type == "payment_message_photo":
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            current_data = self.db.get_payment_success_message()
            current_text = current_data['text'] if current_data else None
            
            if not current_text:
                current_text = self._get_default_payment_message()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            self.db.set_payment_success_message(current_text, text)
            
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _get_default_success_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        return (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n"
            "üìö <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫:</b>\n"
            "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
            "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
            "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!</b>\n\n"
            "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å!"
        )
    
    def _get_default_payment_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        return (
            "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
            "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
            "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
            "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
        )
