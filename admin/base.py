"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from datetime import datetime, timedelta
import logging
import asyncio

from .statistics import StatisticsMixin
from .broadcasts import BroadcastsMixin
from .mass_broadcasts import MassBroadcastsMixin
from .messages import MessagesMixin
from .buttons import ButtonsMixin
from .handlers import HandlersMixin
from .utils import UtilsMixin
from .mixins.menu_mixin import MenuMixin
from .mixins.input_mixin import InputMixin
from .mixins.navigation_mixin import NavigationMixin
from .paid_broadcasts import PaidBroadcastsMixin
from .paid_buttons import PaidButtonsMixin  
from .paid_mass_broadcasts import PaidMassBroadcastsMixin

logger = logging.getLogger(__name__)


class AdminPanel(
    StatisticsMixin,
    BroadcastsMixin,
    MassBroadcastsMixin,
    MessagesMixin,
    ButtonsMixin,
    HandlersMixin,
    UtilsMixin,
    MenuMixin,
    InputMixin,
    NavigationMixin
):
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    """
    
    def __init__(self, db, admin_chat_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        self.db = db
        self.admin_chat_id = admin_chat_id
        self.waiting_for = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
        self.broadcast_drafts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        
        logger.info("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def safe_edit_or_send_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      text: str, reply_markup=None, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if update.callback_query:
                try:
                    sent_message = await update.callback_query.edit_message_text(
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                except BadRequest as e:
                    if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        sent_message = await context.bot.send_message(
                            chat_id=update.effective_user.id,
                            text=text,
                            reply_markup=reply_markup,
                            parse_mode=parse_mode
                        )
                    else:
                        raise
            else:
                sent_message = await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            
            return sent_message
            
        except Exception as e:
            error_msg = str(e)
            if 'Event loop is closed' in error_msg:
                logger.warning(f"‚ö†Ô∏è Event loop –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {error_msg}")
                return None
            elif 'RuntimeError' in error_msg and 'closed' in error_msg:
                logger.warning(f"‚ö†Ô∏è Runtime –æ—à–∏–±–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç—ã–º —Ä–µ—Å—É—Ä—Å–æ–º: {error_msg}")
                return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                sent_message = await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                return sent_message
            except Exception as e2:
                if 'Event loop is closed' not in str(e2):
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                return None
    
    async def send_new_menu_message(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, 
                                  text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é (–≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            sent_message = await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return sent_message
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é: {e}")
            return None
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
        broadcast_status = self.db.get_broadcast_status()
        status_icon = "üü¢" if broadcast_status['enabled'] else "üî¥"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚úâÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data="admin_broadcast")],
            [InlineKeyboardButton(f"{status_icon} –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast_status")],
            [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_welcome")],
            [InlineKeyboardButton("üò¢ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_goodbye")],
            [InlineKeyboardButton("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_success_message")],
            [InlineKeyboardButton("üí∞ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data="admin_payment_message")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_all")],
            [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_scheduled_broadcasts")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        sent_message = await self.safe_edit_or_send_message(update, context, text, reply_markup)
        return sent_message
    
    async def show_main_menu_safe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        broadcast_status = self.db.get_broadcast_status()
        status_icon = "üü¢" if broadcast_status['enabled'] else "üî¥"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚úâÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data="admin_broadcast")],
            [InlineKeyboardButton(f"{status_icon} –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast_status")],
            [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_welcome")],
            [InlineKeyboardButton("üò¢ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_goodbye")],
            [InlineKeyboardButton("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_success_message")],
            [InlineKeyboardButton("üí∞ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data="admin_payment_message")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_all")],
            [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_scheduled_broadcasts")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    async def show_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_text: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id in self.waiting_for:
            del self.waiting_for[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=error_text,
                parse_mode='HTML'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            await self.show_main_menu_safe(update, context)
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def initialize_admin_panel(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_status = self.db.get_broadcast_status()
        if broadcast_status['auto_resume_time']:
            resume_time = datetime.fromisoformat(broadcast_status['auto_resume_time'])
            if datetime.now() >= resume_time:
                self.db.set_broadcast_status(True, None)
                logger.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_admin_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return {
            "waiting_states": len(self.waiting_for),
            "broadcast_drafts": len(self.broadcast_drafts),
            "broadcast_enabled": self.db.get_broadcast_status()['enabled'],
            "total_users": len(self.db.get_users_with_bot_started()),
            "total_broadcast_messages": len(self.db.get_all_broadcast_messages()),
            "scheduled_broadcasts": len(self.db.get_scheduled_broadcasts())
        }
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if hasattr(self, 'waiting_for'):
                self.waiting_for.clear()
            
            # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
            if hasattr(self, 'broadcast_drafts'):
                self.broadcast_drafts.clear()
                
            logger.debug("üßπ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
