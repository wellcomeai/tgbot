"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging
import io

logger = logging.getLogger(__name__)


class StatisticsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.db.get_user_statistics()
        payment_stats = self.db.get_payment_statistics()
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí¨ –ù–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º: {stats['bot_started_users']}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['new_users_24h']}\n"
            f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}\n"
            f"üö™ –û—Ç–ø–∏—Å–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unsubscribed']}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['paid_users']}\n\n"
        )
        
        if payment_stats:
            conversion_rate = payment_stats['conversion_rate']
            avg_amount = payment_stats['avg_amount']
            text += (
                f"üí∏ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
                f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_amount} —Ä—É–±.\n\n"
            )
        
        text += f"üí° <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b> –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {stats['bot_started_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_payment_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
        stats = self.db.get_payment_statistics()
        
        if not stats:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π</b>"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
            return
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
            f"üí∞ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–æ: {stats['paid_users']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_amount']} —Ä—É–±.\n\n"
        )
        
        # UTM –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if stats['utm_sources']:
            text += "üîó <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>\n"
            for utm_source, count in stats['utm_sources']:
                text += f"‚Ä¢ {utm_source}: {count} –ø–ª–∞—Ç–µ–∂–µ–π\n"
            text += "\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        if stats['recent_payments']:
            text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
            for user_id, first_name, username, amount, created_at in stats['recent_payments'][:5]:
                username_str = f"@{username}" if username else "–±–µ–∑ username"
                date_str = datetime.fromisoformat(created_at).strftime("%d.%m %H:%M")
                text += f"‚Ä¢ {first_name} ({username_str}): {amount} —Ä—É–±. - {date_str}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.db.get_latest_users(10)
        
        if not users:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b>\n\n"
            for user in users:
                if len(user) >= 8:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏ has_paid –∏ paid_at
                    user_id_db, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at = user
                    paid_icon = "üí∞" if has_paid else ""
                else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                    user_id_db, username, first_name, joined_at, is_active, bot_started = user
                    paid_icon = ""
                
                username_str = f"@{username}" if username else "–±–µ–∑ username"
                join_date = datetime.fromisoformat(joined_at).strftime("%d.%m.%Y %H:%M")
                bot_status = "üí¨" if bot_started else "‚ùå"
                text += f"‚Ä¢ {first_name} ({username_str}) {bot_status}{paid_icon}\n  ID: {user_id_db}, {join_date}\n\n"
            
            text += "\nüí¨ - –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏\n‚ùå - –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\nüí∞ - –æ–ø–ª–∞—Ç–∏–ª"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°–∫–∞—á–∞—Ç—å CSV", callback_data="download_csv")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def send_csv_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            csv_content = self.db.export_users_to_csv()
            
            csv_file = io.BytesIO()
            csv_file.write(csv_content.encode('utf-8'))
            csv_file.seek(0)
            
            await context.bot.send_document(
                chat_id=update.callback_query.from_user.id,
                document=csv_file,
                filename=f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                caption="üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
            )
            
            await update.callback_query.answer("CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞!", show_alert=True)
