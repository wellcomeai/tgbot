"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging
import io

logger = logging.getLogger(__name__)


class StatisticsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.db.get_user_statistics()
        payment_stats = self.db.get_payment_statistics()
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí¨ –ù–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º: {stats['bot_started_users']}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['new_users_24h']}\n"
            f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}\n"
            f"üö™ –û—Ç–ø–∏—Å–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unsubscribed']}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['paid_users']}\n\n"
        )
        
        if payment_stats:
            conversion_rate = payment_stats['conversion_rate']
            avg_amount = payment_stats['avg_amount']
            text += (
                f"üí∏ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
                f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_amount} —Ä—É–±.\n\n"
            )
        
        text += f"üí° <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b> –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {stats['bot_started_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏", callback_data="admin_funnel_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_payment_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
        stats = self.db.get_payment_statistics()
        
        if not stats:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π</b>"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
            return
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
            f"üí∞ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–æ: {stats['paid_users']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_amount']} —Ä—É–±.\n\n"
        )
        
        # UTM –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if stats['utm_sources']:
            text += "üîó <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>\n"
            for utm_source, count in stats['utm_sources']:
                text += f"‚Ä¢ {utm_source}: {count} –ø–ª–∞—Ç–µ–∂–µ–π\n"
            text += "\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        if stats['recent_payments']:
            text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
            for user_id, first_name, username, amount, created_at in stats['recent_payments'][:5]:
                username_str = f"@{username}" if username else "–±–µ–∑ username"
                date_str = datetime.fromisoformat(created_at).strftime("%d.%m %H:%M")
                text += f"‚Ä¢ {first_name} ({username_str}): {amount} —Ä—É–±. - {date_str}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_funnel_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏
            funnel_data = self.db.get_funnel_data()
            
            if not funnel_data:
                text = (
                    "üìä <b>–í–û–†–û–ù–ö–ê –†–ê–°–°–´–õ–ö–ò</b>\n\n"
                    "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ—Ä–æ–Ω–∫–µ.\n\n"
                    "–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫:\n"
                    "‚Ä¢ –ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
                    "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏\n\n"
                    "üí° –í–æ—Ä–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ—Ä—è—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É."
                )
            else:
                text = "üìä <b>–í–û–†–û–ù–ö–ê –†–ê–°–°–´–õ–ö–ò</b>\n\n"
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ—Ç–≤–∞–ª–æ–º
                biggest_drop = self.db.get_biggest_drop_message()
                
                for msg_data in funnel_data:
                    message_number = msg_data['message_number']
                    message_text = msg_data['message_text']
                    delivered = msg_data['delivered']
                    clicked_callback = msg_data['clicked_callback']
                    clicked_url = msg_data['clicked_url']
                    conversion_rate = msg_data['conversion_rate']
                    dropped = msg_data['dropped']
                    drop_rate = msg_data['drop_rate']
                    
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
                    text += f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ {message_number}</b>\n"
                    text += f"<i>{message_text}</i>\n"
                    
                    if delivered == 0:
                        text += "‚îî‚îÄ ‚è≥ –ï—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å\n\n"
                        continue
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    text += f"‚îú‚îÄ üì¨ –ü–æ–ª—É—á–∏–ª–∏: <b>{delivered}</b> —á–µ–ª.\n"
                    text += f"‚îú‚îÄ üîò –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: <b>{clicked_callback}</b> ({conversion_rate}%)\n"
                    
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–æ–º –æ—Ç–≤–∞–ª–µ
                    if drop_rate >= 30:
                        text += f"‚îî‚îÄ üìâ –û—Ç–≤–∞–ª–∏–ª–æ—Å—å: <b>{dropped}</b> ({drop_rate}%) ‚ö†Ô∏è <b>–ë–û–õ–¨–®–û–ô –û–¢–í–ê–õ!</b>\n\n"
                    elif drop_rate >= 20:
                        text += f"‚îî‚îÄ üìâ –û—Ç–≤–∞–ª–∏–ª–æ—Å—å: <b>{dropped}</b> ({drop_rate}%) ‚ö†Ô∏è\n\n"
                    else:
                        text += f"‚îî‚îÄ üìâ –û—Ç–≤–∞–ª–∏–ª–æ—Å—å: <b>{dropped}</b> ({drop_rate}%)\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if biggest_drop and biggest_drop['drop_rate'] >= 20:
                    text += (
                        f"‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ê:</b> –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ—Ç–≤–∞–ª –ø–æ—Å–ª–µ "
                        f"<b>–°–æ–æ–±—â–µ–Ω–∏—è {biggest_drop['message_number']}</b> ({biggest_drop['drop_rate']}%)\n\n"
                        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                    )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            keyboard = []
            
            if funnel_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
                for msg_data in funnel_data[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    if msg_data['delivered'] > 0:
                        message_number = msg_data['message_number']
                        keyboard.append([
                            InlineKeyboardButton(
                                f"üìù –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}",
                                callback_data=f"admin_msg_detail_{message_number}"
                            )
                        ])
            
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_funnel_stats")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏</b>"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_message_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            details = self.db.get_message_details(message_number)
            
            if not details:
                text = f"‚ùå <b>–°–æ–æ–±—â–µ–Ω–∏–µ {message_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>"
                keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –≤–æ—Ä–æ–Ω–∫–µ", callback_data="admin_funnel_stats")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await self.safe_edit_or_send_message(update, context, text, reply_markup)
                return
            
            message_text = details['message_text']
            delivered = details['delivered']
            clicked_callback = details['clicked_callback_count']
            clicked_url = details['clicked_url_count']
            not_clicked = details['not_clicked']
            avg_reaction_time = details['avg_reaction_time_seconds']
            button_details = details['button_details']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = f"üìù <b>–°–û–û–ë–©–ï–ù–ò–ï {message_number} - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            text += f"<i>{message_text[:100]}{'...' if len(message_text) > 100 else ''}</i>\n\n"
            
            if delivered == 0:
                text += "‚è≥ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            else:
                text += f"üì¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {delivered} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                
                # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
                if avg_reaction_time > 0:
                    if avg_reaction_time < 60:
                        time_str = f"{int(avg_reaction_time)} —Å–µ–∫"
                    elif avg_reaction_time < 3600:
                        minutes = int(avg_reaction_time / 60)
                        seconds = int(avg_reaction_time % 60)
                        time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                    else:
                        hours = int(avg_reaction_time / 3600)
                        minutes = int((avg_reaction_time % 3600) / 60)
                        time_str = f"{hours} —á {minutes} –º–∏–Ω"
                    
                    text += f"‚è∞ <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏:</b> {time_str}\n\n"
                else:
                    text += f"‚è∞ <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º
                if button_details:
                    total_clicks = sum([btn['click_count'] for btn in button_details])
                    text += f"üîò <b>–ö–Ω–æ–ø–∫–∏ (–≤—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks}):</b>\n"
                    
                    for btn in button_details:
                        button_text = btn['button_text']
                        button_type = btn['button_type']
                        click_count = btn['click_count']
                        percentage = btn['percentage']
                        
                        # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏
                        icon = "üì©" if button_type == "callback" else "üîó"
                        
                        text += f"{icon} <b>{button_text}</b> ‚Üí {click_count} –∫–ª–∏–∫–æ–≤ ({percentage}%)\n"
                    
                    text += "\n"
                else:
                    text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
                
                # –ù–µ –Ω–∞–∂–∞–ª–∏ –Ω–∏—á–µ–≥–æ
                if not_clicked > 0:
                    not_clicked_percent = round((not_clicked / delivered * 100), 2)
                    text += f"‚ùå <b>–ù–µ –Ω–∞–∂–∞–ª–∏ –Ω–∏—á–µ–≥–æ:</b> {not_clicked} —á–µ–ª. ({not_clicked_percent}%)\n\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if not_clicked_percent >= 30:
                    text += (
                        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ë–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏. "
                        "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç:\n"
                        "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º\n"
                        "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\n"
                        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                    )
                elif clicked_callback / delivered >= 0.7:  # –ö–æ–Ω–≤–µ—Ä—Å–∏—è >= 70%
                    text += "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_msg_detail_{message_number}")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –≤–æ—Ä–æ–Ω–∫–µ", callback_data="admin_funnel_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}: {e}")
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è</b>"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –≤–æ—Ä–æ–Ω–∫–µ", callback_data="admin_funnel_stats")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.db.get_latest_users(10)
        
        if not users:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b>\n\n"
            for user in users:
                if len(user) >= 8:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏ has_paid –∏ paid_at
                    user_id_db, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at = user
                    paid_icon = "üí∞" if has_paid else ""
                else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                    user_id_db, username, first_name, joined_at, is_active, bot_started = user
                    paid_icon = ""
                
                username_str = f"@{username}" if username else "–±–µ–∑ username"
                join_date = datetime.fromisoformat(joined_at).strftime("%d.%m.%Y %H:%M")
                bot_status = "üí¨" if bot_started else "‚ùå"
                text += f"‚Ä¢ {first_name} ({username_str}) {bot_status}{paid_icon}\n  ID: {user_id_db}, {join_date}\n\n"
            
            text += "\nüí¨ - –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏\n‚ùå - –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\nüí∞ - –æ–ø–ª–∞—Ç–∏–ª"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°–∫–∞—á–∞—Ç—å CSV", callback_data="download_csv")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def send_csv_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            csv_content = self.db.export_users_to_csv()
            
            csv_file = io.BytesIO()
            csv_file.write(csv_content.encode('utf-8'))
            csv_file.seek(0)
            
            await context.bot.send_document(
                chat_id=update.callback_query.from_user.id,
                document=csv_file,
                filename=f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                caption="üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
            )
            
            await update.callback_query.answer("CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞!", show_alert=True)
