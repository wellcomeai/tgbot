"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
import asyncio
import utm_utils

logger = logging.getLogger(__name__)


class MassBroadcastsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    async def show_send_all_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id in self.waiting_for:
            del self.waiting_for[user_id]
        
        draft = self.broadcast_drafts[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        text = "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        
        # –¢–µ–∫—Å—Ç
        if draft["message_text"]:
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {draft['message_text'][:50]}{'...' if len(draft['message_text']) > 50 else ''}\n"
        else:
            text += "üìù <b>–¢–µ–∫—Å—Ç:</b> <i>–ù–µ –∑–∞–¥–∞–Ω</i>\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n"
        else:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ù–µ—Ç\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            text += f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(draft['buttons'])}\n"
        else:
            text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ù–µ—Ç\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <i>–°—Ä–∞–∑—É</i>\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = len(self.db.get_users_with_bot_started())
        text += f"\nüë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "\nüí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="mass_edit_text")],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_add_photo")],
            [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="mass_set_time")],
            [InlineKeyboardButton("üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mass_add_button")],
        ]
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["photo_data"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_remove_photo")])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["buttons"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É", callback_data="mass_remove_button")])
        
        keyboard.append([InlineKeyboardButton("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="mass_preview")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
        if draft["message_text"]:
            keyboard.append([InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="mass_send_now")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_send_all_menu_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        draft = self.broadcast_drafts[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        text = "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        
        # –¢–µ–∫—Å—Ç
        if draft["message_text"]:
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {draft['message_text'][:50]}{'...' if len(draft['message_text']) > 50 else ''}\n"
        else:
            text += "üìù <b>–¢–µ–∫—Å—Ç:</b> <i>–ù–µ –∑–∞–¥–∞–Ω</i>\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n"
        else:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ù–µ—Ç\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            text += f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(draft['buttons'])}\n"
        else:
            text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ù–µ—Ç\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <i>–°—Ä–∞–∑—É</i>\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = len(self.db.get_users_with_bot_started())
        text += f"\nüë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "\nüí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="mass_edit_text")],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_add_photo")],
            [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="mass_set_time")],
            [InlineKeyboardButton("üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mass_add_button")],
        ]
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["photo_data"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_remove_photo")])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["buttons"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É", callback_data="mass_remove_button")])
        
        keyboard.append([InlineKeyboardButton("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="mass_preview")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
        if draft["message_text"]:
            keyboard.append([InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="mass_send_now")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_mass_broadcast_preview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.broadcast_drafts:
            await update.callback_query.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        draft = self.broadcast_drafts[user_id]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not draft["message_text"]:
            await update.callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_text = "üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            preview_text += f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
            preview_text += f"‚åõ <b>–ß–µ—Ä–µ–∑:</b> {draft['scheduled_hours']} —á–∞—Å(–æ–≤)\n\n"
        else:
            preview_text += "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∫–∞:</b> –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n\n"
        
        # –ü–æ–ª—É—á–∞—Ç–µ–ª–∏
        users_count = len(self.db.get_users_with_bot_started())
        preview_text += f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            preview_text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n\n"
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        preview_text += "üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        preview_text += f"<code>{draft['message_text']}</code>\n\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            preview_text += f"üîò <b>–ö–Ω–æ–ø–∫–∏ ({len(draft['buttons'])}):</b>\n"
            for i, button in enumerate(draft["buttons"], 1):
                preview_text += f"{i}. {button['text']} ‚Üí {button['url']}\n"
            preview_text += "\n"
        
        preview_text += "üîó <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>\n\n"
        preview_text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mass_confirm_send")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_send_all")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        try:
            sent_message = await context.bot.send_message(
                chat_id=user_id,
                text=preview_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if draft["photo_data"]:
                try:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=draft["photo_data"],
                        caption="üì∏ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ:</b>",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    if 'Event loop is closed' not in str(e):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ: {e}")
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
    
    async def execute_mass_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.broadcast_drafts:
            await update.callback_query.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        draft = self.broadcast_drafts[user_id]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not draft["message_text"]:
            await update.callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
            return
        
        try:
            if draft["scheduled_hours"]:
                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
                broadcast_id = self.db.add_scheduled_broadcast(
                    draft["message_text"], 
                    scheduled_time, 
                    draft["photo_data"]
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                for i, button in enumerate(draft["buttons"], 1):
                    self.db.add_scheduled_broadcast_button(
                        broadcast_id, 
                        button["text"], 
                        button["url"], 
                        i
                    )
                
                await update.callback_query.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
                
                result_text = (
                    f"‚è∞ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üìÖ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚åõ <b>–ß–µ—Ä–µ–∑:</b> {draft['scheduled_hours']} —á–∞—Å(–æ–≤)\n"
                    f"üì® <b>ID —Ä–∞—Å—Å—ã–ª–∫–∏:</b> #{broadcast_id}\n\n"
                    f"üîó <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
                )
                
            else:
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                users_with_bot = self.db.get_users_with_bot_started()
                
                if not users_with_bot:
                    await update.callback_query.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                reply_markup = None
                if draft["buttons"]:
                    keyboard = []
                    for button in draft["buttons"]:
                        keyboard.append([InlineKeyboardButton(button["text"], url=button["url"])])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                
                sent_count = 0
                failed_count = 0
                
                await update.callback_query.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
                progress_message = None
                if len(users_with_bot) > 50:
                    try:
                        progress_message = await context.bot.send_message(
                            chat_id=user_id,
                            text="üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...</b>\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        if 'Event loop is closed' not in str(e):
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                
                for i, user in enumerate(users_with_bot):
                    user_id_to_send = user[0]
                    try:
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ —Å UTM –º–µ—Ç–∫–∞–º–∏
                        processed_text = utm_utils.process_text_links(draft["message_text"], user_id_to_send)
                        
                        processed_reply_markup = reply_markup
                        if draft["buttons"]:
                            keyboard = []
                            for button in draft["buttons"]:
                                processed_url = utm_utils.add_utm_to_url(button["url"], user_id_to_send)
                                keyboard.append([InlineKeyboardButton(button["text"], url=processed_url)])
                            processed_reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        if draft["photo_data"]:
                            await context.bot.send_photo(
                                chat_id=user_id_to_send,
                                photo=draft["photo_data"],
                                caption=processed_text,
                                parse_mode='HTML',
                                reply_markup=processed_reply_markup
                            )
                        else:
                            await context.bot.send_message(
                                chat_id=user_id_to_send,
                                text=processed_text,
                                parse_mode='HTML',
                                reply_markup=processed_reply_markup
                            )
                        sent_count += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        if progress_message and i % 25 == 0:
                            progress = int((i / len(users_with_bot)) * 100)
                            try:
                                await progress_message.edit_text(
                                    f"üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users_with_bot)}",
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                if 'Event loop is closed' not in str(e):
                                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                        
                    except Exception as e:
                        failed_count += 1
                        if 'Event loop is closed' not in str(e):
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_send}: {e}")
                
                result_text = (
                    f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üì§ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}\n"
                    f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed_count}\n\n"
                    f"üîó <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
                )
            
            # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
            if user_id in self.broadcast_drafts:
                del self.broadcast_drafts[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=result_text,
                    parse_mode='HTML'
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(3)
                await self.show_main_menu_safe(update, context)
            except Exception as e:
                if 'Event loop is closed' not in str(e):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
    
    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ ===
    
    async def handle_mass_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if len(text) > 4096:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        self.broadcast_drafts[user_id]["message_text"] = text
        
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_mass_photo_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if not (text.startswith("http://") or text.startswith("https://")):
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)")
            return
        
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        self.broadcast_drafts[user_id]["photo_data"] = text
        
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        del self.waiting_for[user_id]
        
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_mass_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.broadcast_drafts:
            await update.message.reply_text("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
        if not text.strip():
            self.broadcast_drafts[user_id]["scheduled_hours"] = None
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–π—á–∞—Å!")
        else:
            try:
                hours = float(text.strip())
                if hours <= 0:
                    await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                
                if hours > 8760:  # –ë–æ–ª—å—à–µ –≥–æ–¥–∞
                    await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤")
                    return
                
                self.broadcast_drafts[user_id]["scheduled_hours"] = hours
                scheduled_time = datetime.now() + timedelta(hours=hours)
                await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}!")
                
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤")
                return
        
        del self.waiting_for[user_id]
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_mass_button_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if len(text) > 64:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if user_id not in self.broadcast_drafts:
            await update.message.reply_text("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É URL
        self.waiting_for[user_id]["button_text"] = text
        self.waiting_for[user_id]["type"] = "mass_button_url"
        
        await update.message.reply_text("üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    
    async def handle_mass_button_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if not (text.startswith("http://") or text.startswith("https://")):
            await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        if len(text) > 256:
            await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
            return
        
        if user_id not in self.broadcast_drafts:
            await update.message.reply_text("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫
        if len(self.broadcast_drafts[user_id]["buttons"]) >= 10:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        button_text = self.waiting_for[user_id]["button_text"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.broadcast_drafts[user_id]["buttons"].append({
            "text": button_text,
            "url": text
        })
        
        await update.message.reply_text("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        del self.waiting_for[user_id]
        
        await self.show_send_all_menu_from_context(update, context)
