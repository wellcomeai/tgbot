from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from datetime import datetime, timedelta
import logging
import io
import re
import asyncio
import utm_utils

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self, db, admin_chat_id):
        self.db = db
        self.admin_chat_id = admin_chat_id
        self.waiting_for = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
        self.broadcast_drafts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
    
    async def safe_edit_or_send_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None, parse_mode='HTML'):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if update.callback_query:
                try:
                    sent_message = await update.callback_query.edit_message_text(
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                except BadRequest as e:
                    if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        sent_message = await context.bot.send_message(
                            chat_id=update.effective_user.id,
                            text=text,
                            reply_markup=reply_markup,
                            parse_mode=parse_mode
                        )
                    else:
                        raise
            else:
                sent_message = await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            
            return sent_message
            
        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ event loop
            error_msg = str(e)
            if 'Event loop is closed' in error_msg:
                logger.warning(f"‚ö†Ô∏è Event loop –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {error_msg}")
                return None
            elif 'RuntimeError' in error_msg and 'closed' in error_msg:
                logger.warning(f"‚ö†Ô∏è Runtime –æ—à–∏–±–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç—ã–º —Ä–µ—Å—É—Ä—Å–æ–º: {error_msg}")
                return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                sent_message = await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                return sent_message
            except Exception as e2:
                if 'Event loop is closed' not in str(e2):
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                return None
    
    def parse_delay_input(self, text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        text = text.strip().lower()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–Ω—É—Ç–∞–º–∏
            if '–º' in text or '–º–∏–Ω—É—Ç' in text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
                match = re.search(r'(\d+(?:\.\d+)?)', text)
                if match:
                    minutes = float(match.group(1))
                    hours = minutes / 60
                    return hours, f"{int(minutes)} –º–∏–Ω—É—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —á–∞—Å–∞–º–∏
            elif '—á' in text or '—á–∞—Å' in text:
                match = re.search(r'(\d+(?:\.\d+)?)', text)
                if match:
                    hours = float(match.group(1))
                    return hours, f"{hours} —á–∞—Å–æ–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (—Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∞—Å—ã)
            else:
                hours = float(text)
                if hours < 1:
                    minutes = int(hours * 60)
                    return hours, f"{minutes} –º–∏–Ω—É—Ç"
                else:
                    return hours, f"{hours} —á–∞—Å–æ–≤"
                    
        except ValueError:
            return None, None
        
        return None, None
    
    def parse_hours_input(self, text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
        text = text.strip().lower()
        
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            text_clean = text.replace(' ', '')
            
            # –§–æ—Ä–º–∞—Ç—ã: 1—á, 2—á, 3—á–∞—Å, 4—á–∞—Å–∞, 5—á–∞—Å–æ–≤
            if '—á' in text_clean:
                match = re.search(r'(\d+(?:\.\d+)?)', text_clean)
                if match:
                    hours = float(match.group(1))
                    return hours, f"{hours} —á–∞—Å(–æ–≤)"
            
            # –§–æ—Ä–º–∞—Ç—ã: —á–∞—Å, —á–∞—Å–∞, —á–∞—Å–æ–≤ —Å —á–∏—Å–ª–æ–º
            elif any(word in text for word in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']):
                match = re.search(r'(\d+(?:\.\d+)?)', text)
                if match:
                    hours = float(match.group(1))
                    return hours, f"{hours} —á–∞—Å(–æ–≤)"
            
            # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∞—Å—ã
            else:
                hours = float(text)
                return hours, f"{hours} —á–∞—Å(–æ–≤)"
                    
        except ValueError:
            return None, None
        
        return None, None
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
        broadcast_status = self.db.get_broadcast_status()
        status_icon = "üü¢" if broadcast_status['enabled'] else "üî¥"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚úâÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data="admin_broadcast")],
            [InlineKeyboardButton(f"{status_icon} –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast_status")],
            [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_welcome")],
            [InlineKeyboardButton("üò¢ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_goodbye")],
            [InlineKeyboardButton("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_success_message")],
            [InlineKeyboardButton("üí∞ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data="admin_payment_message")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_all")],
            [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_scheduled_broadcasts")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sent_message = await self.safe_edit_or_send_message(update, context, text, reply_markup)
        return sent_message
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–¢–ï–ñ–ê–ú–ò =====
    
    async def show_payment_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_message_data = self.db.get_payment_success_message()
        
        if payment_message_data and payment_message_data['text']:
            current_message = payment_message_data['text']
            current_photo = payment_message_data['photo_url']
        else:
            current_message = (
                "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
            )
            current_photo = None
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_payment_message_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_payment_message_photo")]
        ]
        
        if current_photo:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_payment_message_photo")])
        
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_payment_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üí∞ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if current_photo else '–ù–µ—Ç'}\n\n"
            "üí° <i>–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {amount} - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_payment_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
        stats = self.db.get_payment_statistics()
        
        if not stats:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π</b>"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.safe_edit_or_send_message(update, context, text, reply_markup)
            return
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
            f"üí∞ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–æ: {stats['paid_users']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_amount']} —Ä—É–±.\n\n"
        )
        
        # UTM –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if stats['utm_sources']:
            text += "üîó <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>\n"
            for utm_source, count in stats['utm_sources']:
                text += f"‚Ä¢ {utm_source}: {count} –ø–ª–∞—Ç–µ–∂–µ–π\n"
            text += "\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        if stats['recent_payments']:
            text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
            for user_id, first_name, username, amount, created_at in stats['recent_payments'][:5]:
                username_str = f"@{username}" if username else "–±–µ–∑ username"
                date_str = datetime.fromisoformat(created_at).strftime("%d.%m %H:%M")
                text += f"‚Ä¢ {first_name} ({username_str}): {amount} —Ä—É–±. - {date_str}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def handle_payment_message_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, input_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        if input_type == "payment_message_text":
            if len(text) > 4096:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            current_data = self.db.get_payment_success_message()
            current_photo = current_data['photo_url'] if current_data else None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            self.db.set_payment_success_message(text, current_photo)
            
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
            
        elif input_type == "payment_message_photo":
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            current_data = self.db.get_payment_success_message()
            current_text = current_data['text'] if current_data else None
            
            if not current_text:
                current_text = (
                    "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                    "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                    "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            self.db.set_payment_success_message(current_text, text)
            
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
    
    async def show_payment_message_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_message_data = self.db.get_payment_success_message()
        
        if payment_message_data and payment_message_data['text']:
            current_message = payment_message_data['text']
            current_photo = payment_message_data['photo_url']
        else:
            current_message = (
                "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
            )
            current_photo = None
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_payment_message_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_payment_message_photo")]
        ]
        
        if current_photo:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_payment_message_photo")])
        
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_payment_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üí∞ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if current_photo else '–ù–µ—Ç'}\n\n"
            "üí° <i>–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {amount} - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.</i>"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.db.get_user_statistics()
        payment_stats = self.db.get_payment_statistics()
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí¨ –ù–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º: {stats['bot_started_users']}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['new_users_24h']}\n"
            f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}\n"
            f"üö™ –û—Ç–ø–∏—Å–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unsubscribed']}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['paid_users']}\n\n"
        )
        
        if payment_stats:
            conversion_rate = payment_stats['conversion_rate']
            avg_amount = payment_stats['avg_amount']
            text += (
                f"üí∏ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
                f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_amount} —Ä—É–±.\n\n"
            )
        
        text += f"üí° <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b> –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {stats['bot_started_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_broadcast_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcast_status = self.db.get_broadcast_status()
        
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if broadcast_status['enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        text = f"üîÑ <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        
        if not broadcast_status['enabled'] and broadcast_status['auto_resume_time']:
            resume_time = datetime.fromisoformat(broadcast_status['auto_resume_time'])
            text += f"<b>–ê–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {resume_time.strftime('%d.%m.%Y %H:%M')}\n"
        
        keyboard = []
        
        if broadcast_status['enabled']:
            keyboard.append([InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="disable_broadcast")])
        else:
            keyboard.append([InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="enable_broadcast")])
            keyboard.append([InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="set_broadcast_timer")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
        messages = self.db.get_all_broadcast_messages()
        
        keyboard = []
        for msg_num, text, delay_hours, photo_url in messages:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            buttons = self.db.get_message_buttons(msg_num)
            button_icon = f"üîò{len(buttons)}" if buttons else ""
            photo_icon = "üñº" if photo_url else ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if delay_hours < 1:
                delay_str = f"{int(delay_hours * 60)}–º"
            else:
                delay_str = f"{delay_hours}—á"
            
            button_text = f"{photo_icon}{button_icon} –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ({delay_str})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_msg_{msg_num}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚úâÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # ===== –°–ò–°–¢–ï–ú–ê –ú–ê–°–°–û–í–´–• –†–ê–°–°–´–õ–û–ö =====
    
    async def show_send_all_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id in self.waiting_for:
            del self.waiting_for[user_id]
        
        draft = self.broadcast_drafts[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        text = "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        
        # –¢–µ–∫—Å—Ç
        if draft["message_text"]:
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {draft['message_text'][:50]}{'...' if len(draft['message_text']) > 50 else ''}\n"
        else:
            text += "üìù <b>–¢–µ–∫—Å—Ç:</b> <i>–ù–µ –∑–∞–¥–∞–Ω</i>\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n"
        else:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ù–µ—Ç\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            text += f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(draft['buttons'])}\n"
        else:
            text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ù–µ—Ç\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <i>–°—Ä–∞–∑—É</i>\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = len(self.db.get_users_with_bot_started())
        text += f"\nüë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "\nüí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="mass_edit_text")],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_add_photo")],
            [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="mass_set_time")],
            [InlineKeyboardButton("üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mass_add_button")],
        ]
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["photo_data"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_remove_photo")])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["buttons"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É", callback_data="mass_remove_button")])
        
        keyboard.append([InlineKeyboardButton("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="mass_preview")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
        if draft["message_text"]:
            keyboard.append([InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="mass_send_now")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_mass_broadcast_preview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.broadcast_drafts:
            await update.callback_query.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        draft = self.broadcast_drafts[user_id]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not draft["message_text"]:
            await update.callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_text = "üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            preview_text += f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
            preview_text += f"‚åõ <b>–ß–µ—Ä–µ–∑:</b> {draft['scheduled_hours']} —á–∞—Å(–æ–≤)\n\n"
        else:
            preview_text += "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∫–∞:</b> –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n\n"
        
        # –ü–æ–ª—É—á–∞—Ç–µ–ª–∏
        users_count = len(self.db.get_users_with_bot_started())
        preview_text += f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            preview_text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n\n"
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        preview_text += "üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        preview_text += f"<code>{draft['message_text']}</code>\n\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            preview_text += f"üîò <b>–ö–Ω–æ–ø–∫–∏ ({len(draft['buttons'])}):</b>\n"
            for i, button in enumerate(draft["buttons"], 1):
                preview_text += f"{i}. {button['text']} ‚Üí {button['url']}\n"
            preview_text += "\n"
        
        preview_text += "üîó <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>\n\n"
        preview_text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mass_confirm_send")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_send_all")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        try:
            sent_message = await context.bot.send_message(
                chat_id=user_id,
                text=preview_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if draft["photo_data"]:
                try:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=draft["photo_data"],
                        caption="üì∏ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ:</b>",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    if 'Event loop is closed' not in str(e):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ: {e}")
        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ event loop –æ—à–∏–±–∫–∏
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
    
    async def execute_mass_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.broadcast_drafts:
            await update.callback_query.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        draft = self.broadcast_drafts[user_id]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not draft["message_text"]:
            await update.callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
            return
        
        try:
            if draft["scheduled_hours"]:
                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
                broadcast_id = self.db.add_scheduled_broadcast(
                    draft["message_text"], 
                    scheduled_time, 
                    draft["photo_data"]
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                for i, button in enumerate(draft["buttons"], 1):
                    self.db.add_scheduled_broadcast_button(
                        broadcast_id, 
                        button["text"], 
                        button["url"], 
                        i
                    )
                
                await update.callback_query.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
                
                result_text = (
                    f"‚è∞ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üìÖ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚åõ <b>–ß–µ—Ä–µ–∑:</b> {draft['scheduled_hours']} —á–∞—Å(–æ–≤)\n"
                    f"üì® <b>ID —Ä–∞—Å—Å—ã–ª–∫–∏:</b> #{broadcast_id}\n\n"
                    f"üîó <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
                )
                
            else:
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                users_with_bot = self.db.get_users_with_bot_started()
                
                if not users_with_bot:
                    await update.callback_query.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                reply_markup = None
                if draft["buttons"]:
                    keyboard = []
                    for button in draft["buttons"]:
                        keyboard.append([InlineKeyboardButton(button["text"], url=button["url"])])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                
                sent_count = 0
                failed_count = 0
                
                await update.callback_query.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
                progress_message = None
                if len(users_with_bot) > 50:
                    try:
                        progress_message = await context.bot.send_message(
                            chat_id=user_id,
                            text="üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...</b>\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        if 'Event loop is closed' not in str(e):
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                
                for i, user in enumerate(users_with_bot):
                    user_id_to_send = user[0]
                    try:
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ —Å UTM –º–µ—Ç–∫–∞–º–∏
                        processed_text = utm_utils.process_text_links(draft["message_text"], user_id_to_send)
                        
                        processed_reply_markup = reply_markup
                        if draft["buttons"]:
                            keyboard = []
                            for button in draft["buttons"]:
                                processed_url = utm_utils.add_utm_to_url(button["url"], user_id_to_send)
                                keyboard.append([InlineKeyboardButton(button["text"], url=processed_url)])
                            processed_reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        if draft["photo_data"]:
                            await context.bot.send_photo(
                                chat_id=user_id_to_send,
                                photo=draft["photo_data"],
                                caption=processed_text,
                                parse_mode='HTML',
                                reply_markup=processed_reply_markup
                            )
                        else:
                            await context.bot.send_message(
                                chat_id=user_id_to_send,
                                text=processed_text,
                                parse_mode='HTML',
                                reply_markup=processed_reply_markup
                            )
                        sent_count += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        if progress_message and i % 25 == 0:
                            progress = int((i / len(users_with_bot)) * 100)
                            try:
                                await progress_message.edit_text(
                                    f"üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users_with_bot)}",
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ event loop –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                                if 'Event loop is closed' not in str(e):
                                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                        
                    except Exception as e:
                        failed_count += 1
                        if 'Event loop is closed' not in str(e):
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_send}: {e}")
                
                result_text = (
                    f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üì§ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}\n"
                    f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed_count}\n\n"
                    f"üîó <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
                )
            
            # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
            if user_id in self.broadcast_drafts:
                del self.broadcast_drafts[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=result_text,
                    parse_mode='HTML'
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(3)
                await self.show_main_menu_safe(update, context)
            except Exception as e:
                if 'Event loop is closed' not in str(e):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
    
    async def show_main_menu_safe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        broadcast_status = self.db.get_broadcast_status()
        status_icon = "üü¢" if broadcast_status['enabled'] else "üî¥"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚úâÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data="admin_broadcast")],
            [InlineKeyboardButton(f"{status_icon} –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast_status")],
            [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_welcome")],
            [InlineKeyboardButton("üò¢ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_goodbye")],
            [InlineKeyboardButton("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_success_message")],
            [InlineKeyboardButton("üí∞ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data="admin_payment_message")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")],
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_all")],
            [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_scheduled_broadcasts")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    # ===== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.db.get_latest_users(10)
        
        if not users:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b>\n\n"
            for user in users:
                if len(user) >= 8:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏ has_paid –∏ paid_at
                    user_id_db, username, first_name, joined_at, is_active, bot_started, has_paid, paid_at = user
                    paid_icon = "üí∞" if has_paid else ""
                else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                    user_id_db, username, first_name, joined_at, is_active, bot_started = user
                    paid_icon = ""
                
                username_str = f"@{username}" if username else "–±–µ–∑ username"
                join_date = datetime.fromisoformat(joined_at).strftime("%d.%m.%Y %H:%M")
                bot_status = "üí¨" if bot_started else "‚ùå"
                text += f"‚Ä¢ {first_name} ({username_str}) {bot_status}{paid_icon}\n  ID: {user_id_db}, {join_date}\n\n"
            
            text += "\nüí¨ - –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏\n‚ùå - –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\nüí∞ - –æ–ø–ª–∞—Ç–∏–ª"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°–∫–∞—á–∞—Ç—å CSV", callback_data="download_csv")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def send_csv_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            csv_content = self.db.export_users_to_csv()
            
            csv_file = io.BytesIO()
            csv_file.write(csv_content.encode('utf-8'))
            csv_file.seek(0)
            
            await context.bot.send_document(
                chat_id=update.callback_query.from_user.id,
                document=csv_file,
                filename=f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                caption="üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
            )
            
            await update.callback_query.answer("CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞!", show_alert=True)
    
    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î request_text_input =====
    
    async def request_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, input_type, **kwargs):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        user_id = update.callback_query.from_user.id
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if input_type == "add_button":
            self.waiting_for[user_id] = {
                "type": input_type, 
                "created_at": datetime.now(), 
                "step": "text",  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
                **kwargs
            }
        elif input_type == "add_goodbye_button":
            self.waiting_for[user_id] = {
                "type": input_type, 
                "created_at": datetime.now(), 
                "step": "text",  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—â–∞–Ω–∏—è
                **kwargs
            }
        else:
            self.waiting_for[user_id] = {"type": input_type, "created_at": datetime.now(), **kwargs}
        
        texts = {
            "welcome": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "goodbye": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "success_message": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            "broadcast_text": f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {kwargs.get('message_number')}:",
            "broadcast_delay": self._get_delay_text(kwargs.get('message_number')),
            "broadcast_photo": f"üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {kwargs.get('message_number')} –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "welcome_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "goodbye_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "edit_button_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "edit_button_url": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "broadcast_timer": "‚è∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
            "add_message": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
            "add_button": f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {kwargs.get('message_number')}:\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
            # –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            "mass_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
            "mass_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            "mass_time": "‚è∞ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–ü—Ä–∏–º–µ—Ä—ã: 1, 2.5, 24\n\n–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–π—á–∞—Å:",
            "mass_button_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "mass_button_url": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            # –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
            "payment_message_text": "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n\nüí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {amount} - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.",
            "payment_message_photo": "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:",
            # –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ö–ù–û–ü–û–ö –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
            "add_welcome_button": "‚å®Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:",
            "edit_welcome_button_text": "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            # –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ö–ù–û–ü–û–ö –ü–†–û–©–ê–ù–ò–Ø
            "add_goodbye_button": "üîò –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è:\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
            "edit_goodbye_button_text": "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
            "edit_goodbye_button_url": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
        }
        
        text = texts.get(input_type, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_send_all")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    def _get_delay_text(self, message_number):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        return (
            f"‚è∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}:\n\n"
            f"üìù <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n"
            f"‚Ä¢ <code>30–º</code> –∏–ª–∏ <code>30 –º–∏–Ω—É—Ç</code> - –¥–ª—è –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code> - –¥–ª—è —á–∞—Å–æ–≤\n"
            f"‚Ä¢ <code>1.5</code> - –¥–ª—è 1.5 —á–∞—Å–æ–≤\n"
            f"‚Ä¢ <code>0.05</code> - –¥–ª—è 3 –º–∏–Ω—É—Ç\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä—ã: <code>3–º</code>, <code>30 –º–∏–Ω—É—Ç</code>, <code>2—á</code>, <code>1.5</code>"
        )
    
    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–´–• –ü–ï–†–ï–•–û–î–û–í =====
    
    async def send_new_menu_message(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é (–≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            sent_message = await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return sent_message
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é: {e}")
            return None
    
    async def show_send_all_menu_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        draft = self.broadcast_drafts[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        text = "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        
        # –¢–µ–∫—Å—Ç
        if draft["message_text"]:
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {draft['message_text'][:50]}{'...' if len(draft['message_text']) > 50 else ''}\n"
        else:
            text += "üìù <b>–¢–µ–∫—Å—Ç:</b> <i>–ù–µ –∑–∞–¥–∞–Ω</i>\n"
        
        # –§–æ—Ç–æ
        if draft["photo_data"]:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ï—Å—Ç—å\n"
        else:
            text += "üñº <b>–§–æ—Ç–æ:</b> –ù–µ—Ç\n"
        
        # –ö–Ω–æ–ø–∫–∏
        if draft["buttons"]:
            text += f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(draft['buttons'])}\n"
        else:
            text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ù–µ—Ç\n"
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if draft["scheduled_hours"]:
            scheduled_time = datetime.now() + timedelta(hours=draft["scheduled_hours"])
            text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <i>–°—Ä–∞–∑—É</i>\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = len(self.db.get_users_with_bot_started())
        text += f"\nüë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "\nüí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="mass_edit_text")],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_add_photo")],
            [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="mass_set_time")],
            [InlineKeyboardButton("üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mass_add_button")],
        ]
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["photo_data"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mass_remove_photo")])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if draft["buttons"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É", callback_data="mass_remove_button")])
        
        keyboard.append([InlineKeyboardButton("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="mass_preview")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
        if draft["message_text"]:
            keyboard.append([InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="mass_send_now")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_welcome_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        welcome_data = self.db.get_welcome_message()
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_welcome_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_welcome_photo")]
        ]
        
        if welcome_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_welcome_photo")])
        
        keyboard.append([InlineKeyboardButton("‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_welcome_buttons")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if welcome_buttons:
            buttons_info = f"\n\n<b>‚å®Ô∏è –ö–Ω–æ–ø–∫–∏ ({len(welcome_buttons)}):</b>\n"
            for i, (button_id, button_text, position) in enumerate(welcome_buttons, 1):
                buttons_info += f"{i}. {button_text}\n"
        
        message_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{welcome_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if welcome_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_goodbye_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        goodbye_data = self.db.get_goodbye_message()
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_goodbye_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_goodbye_photo")]
        ]
        
        if goodbye_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_goodbye_photo")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_goodbye_buttons")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if goodbye_buttons:
            buttons_info = f"\n\n<b>üîò –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ({len(goodbye_buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(goodbye_buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        message_text = (
            "üò¢ <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{goodbye_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if goodbye_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_success_message_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM settings WHERE key = "success_message"')
        success_msg = cursor.fetchone()
        conn.close()
        
        if success_msg:
            current_message = success_msg[0]
        else:
            current_message = (
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n"
                "üìö <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫:</b>\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
                "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
                "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
                "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!</b>\n\n"
                "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å!"
            )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_success_message_text")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_success_message")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_message_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        msg_data = self.db.get_broadcast_message(message_number)
        if not msg_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        text, delay_hours, photo_url = msg_data
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{message_number}")],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data=f"edit_delay_{message_number}")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{message_number}")]
        ]
        
        if photo_url:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_photo_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data=f"manage_buttons_{message_number}")])
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_msg_{message_number}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if buttons:
            buttons_info = f"\n<b>–ö–Ω–æ–ø–∫–∏ ({len(buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        if delay_hours < 1:
            delay_str = f"{int(delay_hours * 60)} –º–∏–Ω—É—Ç"
        else:
            delay_str = f"{delay_hours} —á–∞—Å–æ–≤"
        
        message_text = (
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ {message_number}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay_str} –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if photo_url else '–ù–µ—Ç'}"
            f"{buttons_info}\n\n"
            f"üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_message_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = []
        
        for button_id, button_text, button_url, position in buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_button_{button_id}")])
        
        if len(buttons) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"add_button_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"edit_msg_{message_number}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(buttons)}/3\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT message_number, button_text, button_url 
            FROM message_buttons 
            WHERE id = ?
        ''', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        message_number, button_text, button_url = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"manage_buttons_{message_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_welcome_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_data = self.db.get_welcome_message()
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_welcome_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_welcome_photo")]
        ]
        
        if welcome_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_welcome_photo")])
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard.append([InlineKeyboardButton("‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_welcome_buttons")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö
        buttons_info = ""
        if welcome_buttons:
            buttons_info = f"\n\n<b>‚å®Ô∏è –ö–Ω–æ–ø–∫–∏ ({len(welcome_buttons)}):</b>\n"
            for i, (button_id, button_text, position) in enumerate(welcome_buttons, 1):
                buttons_info += f"{i}. {button_text}\n"
        
        message_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{welcome_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if welcome_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    # ===== –ù–û–í–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î show_welcome_buttons_management =====
    async def show_welcome_buttons_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = []
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for button_id, button_text, position in welcome_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_welcome_button_{button_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ª–∏–º–∏—Ç 5 –∫–Ω–æ–ø–æ–∫)
        if len(welcome_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_welcome_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_welcome")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(welcome_buttons)}/5\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # ===== –ù–û–í–´–ô –ú–ï–¢–û–î show_welcome_button_edit =====
    async def show_welcome_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, position FROM welcome_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_id, button_text, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_welcome_button_text_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_welcome_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_welcome_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # ===== –ù–û–í–´–ô –ú–ï–¢–û–î show_welcome_button_delete_confirm =====
    async def show_welcome_button_delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT button_text FROM welcome_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_text = button_data[0]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_welcome_button_{button_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_welcome_button_{button_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É:\n"
            f'<b>"{button_text}"</b>?'
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # ===== –ù–û–í–´–ï HELPER-–ú–ï–¢–û–î–´ =====
    async def show_welcome_buttons_management_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        welcome_buttons = self.db.get_welcome_buttons()
        
        keyboard = []
        
        for button_id, button_text, position in welcome_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_welcome_button_{button_id}")])
        
        if len(welcome_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_welcome_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_welcome")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(welcome_buttons)}/5\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_welcome_button_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, position FROM welcome_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        button_id, button_text, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_welcome_button_text_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_welcome_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_welcome_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚å®Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò –í–í–û–î–ê =====
    async def handle_add_welcome_button_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        user_id = update.effective_user.id
        
        if len(text) > 30:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        existing_button = self.db.get_welcome_button_by_text(text)
        if existing_button:
            await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        button_id = self.db.add_welcome_button(text)
        
        await update.message.reply_text(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await self.show_welcome_buttons_management_from_context(update, context)
    
    async def handle_edit_welcome_button_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        user_id = update.effective_user.id
        button_id = self.waiting_for[user_id]["button_id"]
        
        if len(text) > 30:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É)
        existing_button = self.db.get_welcome_button_by_text(text)
        if existing_button and existing_button[0] != button_id:
            await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.db.update_welcome_button(button_id, button_text=text)
        
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        await self.show_welcome_button_edit_from_context(update, context, button_id)
    
    async def handle_add_goodbye_button_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è (–≤ –¥–≤–∞ —ç—Ç–∞–ø–∞)"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if len(text) > 64:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ URL
            self.waiting_for[user_id]["button_text"] = text
            self.waiting_for[user_id]["step"] = "url"
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{text}</b>\n\n"
                f"üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä: https://example.com\n"
                f"üéØ UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='HTML'
            )
            
        elif current_step == "url":
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º URL –∫–Ω–æ–ø–∫–∏
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            if len(text) > 256:
                await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                return
            
            button_text = waiting_data["button_text"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
            existing_button = self.db.get_goodbye_button_by_text(button_text)
            if existing_button:
                await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                del self.waiting_for[user_id]
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            button_id = self.db.add_goodbye_button(button_text, text)
            
            await update.message.reply_text(
                f"‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
                f"üîó <b>URL:</b> {text}\n\n"
                f"üéØ <b>UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>",
                parse_mode='HTML'
            )
            
            del self.waiting_for[user_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            await self.show_goodbye_buttons_management_from_context(update, context)
        
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step='{current_step}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.waiting_for:
                del self.waiting_for[user_id]
    
    async def handle_edit_goodbye_button_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        button_id = self.waiting_for[user_id]["button_id"]
        
        if len(text) > 64:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É)
        existing_button = self.db.get_goodbye_button_by_text(text)
        if existing_button and existing_button[0] != button_id:
            await update.message.reply_text("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.db.update_goodbye_button(button_id, button_text=text)
        
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        await self.show_goodbye_button_edit_from_context(update, context, button_id)
    
    async def handle_edit_goodbye_button_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        button_id = self.waiting_for[user_id]["button_id"]
        
        if not (text.startswith("http://") or text.startswith("https://")):
            await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        if len(text) > 256:
            await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        self.db.update_goodbye_button(button_id, button_url=text)
        
        await update.message.reply_text("‚úÖ URL –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        await self.show_goodbye_button_edit_from_context(update, context, button_id)
    
    async def show_goodbye_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        goodbye_data = self.db.get_goodbye_message()
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_goodbye_text")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_goodbye_photo")]
        ]
        
        if goodbye_data['photo']:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_goodbye_photo")])
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="manage_goodbye_buttons")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö
        buttons_info = ""
        if goodbye_buttons:
            buttons_info = f"\n\n<b>üîò –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ({len(goodbye_buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(goodbye_buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        message_text = (
            "üò¢ <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{goodbye_data['text']}\n\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if goodbye_data['photo'] else '–ù–µ—Ç'}"
            f"{buttons_info}"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_success_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM settings WHERE key = "success_message"')
        success_msg = cursor.fetchone()
        conn.close()
        
        if success_msg:
            current_message = success_msg[0]
        else:
            current_message = (
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n"
                "üìö <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫:</b>\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
                "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
                "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
                "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!</b>\n\n"
                "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å!"
            )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_success_message_text")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset_success_message")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_message}"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
    
    async def show_scheduled_broadcasts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcasts = self.db.get_scheduled_broadcasts(include_sent=False)
        
        keyboard = []
        
        if broadcasts:
            for broadcast_id, message_text, photo_url, scheduled_time, is_sent, created_at in broadcasts:
                scheduled_dt = datetime.fromisoformat(scheduled_time)
                time_str = scheduled_dt.strftime("%d.%m %H:%M")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
                buttons = self.db.get_scheduled_broadcast_buttons(broadcast_id)
                button_icon = f"üîò{len(buttons)}" if buttons else ""
                photo_icon = "üñº" if photo_url else ""
                
                short_text = message_text[:20] + "..." if len(message_text) > 20 else message_text
                button_display = f"{photo_icon}{button_icon} {time_str}: {short_text}"
                keyboard.append([InlineKeyboardButton(button_display, callback_data=f"edit_scheduled_broadcast_{broadcast_id}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {len(broadcasts)}\n\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ù–û–ü–ö–ê–ú–ò –ü–†–û–©–ê–ù–ò–Ø =====
    
    async def show_goodbye_buttons_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = []
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for button_id, button_text, button_url, position in goodbye_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_goodbye_button_{button_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ª–∏–º–∏—Ç 5 –∫–Ω–æ–ø–æ–∫)
        if len(goodbye_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_goodbye_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_goodbye")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(goodbye_buttons)}/5\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_goodbye_button_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, button_url, position FROM goodbye_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_id, button_text, button_url, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_goodbye_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_goodbye_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_goodbye_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_goodbye_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_goodbye_button_delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT button_text FROM goodbye_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await update.callback_query.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        button_text = button_data[0]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_goodbye_button_{button_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_goodbye_button_{button_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É:\n"
            f'<b>"{button_text}"</b>?'
        )
        
        await self.safe_edit_or_send_message(update, context, text, reply_markup)
    
    async def show_goodbye_buttons_management_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ—â–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        goodbye_buttons = self.db.get_goodbye_buttons()
        
        keyboard = []
        
        for button_id, button_text, button_url, position in goodbye_buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_goodbye_button_{button_id}")])
        
        if len(goodbye_buttons) < 5:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_goodbye_button")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_goodbye")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(goodbye_buttons)}/5\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    async def show_goodbye_button_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id, button_text, button_url, position FROM goodbye_buttons WHERE id = ?', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        button_id, button_text, button_url, position = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_goodbye_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_goodbye_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_goodbye_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_goodbye_buttons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.send_new_menu_message(context, user_id, text, reply_markup)
    
    # ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    
    async def initialize_admin_panel(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_status = self.db.get_broadcast_status()
        if broadcast_status['auto_resume_time']:
            resume_time = datetime.fromisoformat(broadcast_status['auto_resume_time'])
            if datetime.now() >= resume_time:
                self.db.set_broadcast_status(True, None)
                logger.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_admin_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return {
            "waiting_states": len(self.waiting_for),
            "broadcast_drafts": len(self.broadcast_drafts),
            "broadcast_enabled": self.db.get_broadcast_status()['enabled'],
            "total_users": len(self.db.get_users_with_bot_started()),
            "total_broadcast_messages": len(self.db.get_all_broadcast_messages()),
            "scheduled_broadcasts": len(self.db.get_scheduled_broadcasts())
        }
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if hasattr(self, 'waiting_for'):
                self.waiting_for.clear()
            
            # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
            if hasattr(self, 'broadcast_drafts'):
                self.broadcast_drafts.clear()
                
            logger.debug("üßπ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
    
    async def show_button_edit_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, button_id):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
        conn = self.db._get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT message_number, button_text, button_url 
            FROM message_buttons 
            WHERE id = ?
        ''', (button_id,))
        button_data = cursor.fetchone()
        conn.close()
        
        if not button_data:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        message_number, button_text, button_url = button_data
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_button_text_{button_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_button_url_{button_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_button_{button_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"manage_buttons_{message_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}\n\n"
            f"üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_broadcast_menu_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        messages = self.db.get_all_broadcast_messages()
        
        keyboard = []
        for msg_num, text, delay_hours, photo_url in messages:
            buttons = self.db.get_message_buttons(msg_num)
            button_icon = f"üîò{len(buttons)}" if buttons else ""
            photo_icon = "üñº" if photo_url else ""
            
            if delay_hours < 1:
                delay_str = f"{int(delay_hours * 60)}–º"
            else:
                delay_str = f"{delay_hours}—á"
            
            button_text = f"{photo_icon}{button_icon} –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ({delay_str})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_msg_{msg_num}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_message")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úâÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "üñº - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ\n"
            "üîòN - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π.</i>"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    async def show_message_buttons_from_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = []
        
        for button_id, button_text, button_url, position in buttons:
            keyboard.append([InlineKeyboardButton(f"üìù {button_text}", callback_data=f"edit_button_{button_id}")])
        
        if len(buttons) < 3:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"add_button_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"edit_msg_{message_number}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üîò <b>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_number}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {len(buttons)}/3\n\n"
            "üí° <i>UTM –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"
        )
        
        await self.send_new_menu_message(context, user_id, message_text, reply_markup)
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ó–ê–ü–†–û–°–û–í =====
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        try:
            await query.answer()
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if data == "admin_back":
                await self.show_main_menu(update, context)
            elif data == "admin_stats":
                await self.show_statistics(update, context)
            elif data == "admin_broadcast":
                await self.show_broadcast_menu(update, context)
            elif data == "admin_broadcast_status":
                await self.show_broadcast_status(update, context)
            elif data == "admin_users":
                await self.show_users_list(update, context)
            elif data == "admin_send_all":
                await self.show_send_all_menu(update, context)
            elif data == "admin_welcome":
                await self.show_welcome_edit(update, context)
            elif data == "admin_goodbye":
                await self.show_goodbye_edit(update, context)
            elif data == "admin_success_message":
                await self.show_success_message_edit(update, context)
            elif data == "admin_scheduled_broadcasts":
                await self.show_scheduled_broadcasts(update, context)
            elif data == "download_csv":
                await self.send_csv_file(update, context)
            elif data == "enable_broadcast":
                self.db.set_broadcast_status(True, None)
                await self.show_broadcast_status(update, context)
            elif data == "disable_broadcast":
                self.db.set_broadcast_status(False, None)
                await self.show_broadcast_status(update, context)
            elif data == "set_broadcast_timer":
                await self.request_text_input(update, context, "broadcast_timer")
            
            # ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô =====
            elif data == "admin_payment_message":
                await self.show_payment_message_edit(update, context)
            elif data == "admin_payment_stats":
                await self.show_payment_statistics(update, context)
            elif data == "edit_payment_message_text":
                await self.request_text_input(update, context, "payment_message_text")
            elif data == "edit_payment_message_photo":
                await self.request_text_input(update, context, "payment_message_photo")
            elif data == "remove_payment_message_photo":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
                current_data = self.db.get_payment_success_message()
                current_text = current_data['text'] if current_data else None
                if not current_text:
                    current_text = (
                        "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                        "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                        "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                        "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                        "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                    )
                self.db.set_payment_success_message(current_text, "")
                await self.show_payment_message_edit(update, context)
            elif data == "reset_payment_message":
                default_payment_message = (
                    "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                    "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                    "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                )
                self.db.set_payment_success_message(default_payment_message, "")
                await self.show_payment_message_edit(update, context)
            
            # ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò =====
            elif data == "mass_edit_text":
                await self.request_text_input(update, context, "mass_text")
            elif data == "mass_add_photo":
                await self.request_text_input(update, context, "mass_photo")
            elif data == "mass_set_time":
                await self.request_text_input(update, context, "mass_time")
            elif data == "mass_add_button":
                await self.request_text_input(update, context, "mass_button_text")
            elif data == "mass_remove_photo":
                if user_id in self.broadcast_drafts:
                    self.broadcast_drafts[user_id]["photo_data"] = None
                    await self.show_send_all_menu(update, context)
            elif data == "mass_remove_button":
                if user_id in self.broadcast_drafts and self.broadcast_drafts[user_id]["buttons"]:
                    self.broadcast_drafts[user_id]["buttons"].pop()
                    await self.show_send_all_menu(update, context)
            elif data == "mass_preview":
                await self.show_mass_broadcast_preview(update, context)
            elif data == "mass_send_now":
                if user_id in self.broadcast_drafts:
                    self.broadcast_drafts[user_id]["scheduled_hours"] = None
                    await self.show_mass_broadcast_preview(update, context)
            elif data == "mass_confirm_send":
                await self.execute_mass_broadcast(update, context)
            
            # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–°–ù–û–í–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –†–ê–°–°–´–õ–ö–ò =====
            elif data.startswith("edit_msg_"):
                message_number = int(data.split("_")[2])
                await self.show_message_edit(update, context, message_number)
            elif data.startswith("manage_buttons_"):
                message_number = int(data.split("_")[2])
                await self.show_message_buttons(update, context, message_number)
            elif data.startswith("edit_button_") and not data.startswith("edit_button_text_") and not data.startswith("edit_button_url_"):
                button_id = int(data.split("_")[2])
                await self.show_button_edit(update, context, button_id)
            elif data.startswith("edit_button_text_"):
                button_id = int(data.split("_")[3])
                await self.request_text_input(update, context, "edit_button_text", button_id=button_id)
            elif data.startswith("edit_button_url_"):
                button_id = int(data.split("_")[3])
                await self.request_text_input(update, context, "edit_button_url", button_id=button_id)
            elif data.startswith("delete_button_"):
                button_id = int(data.split("_")[2])
                conn = self.db._get_connection()
                cursor = conn.cursor()
                cursor.execute('SELECT message_number FROM message_buttons WHERE id = ?', (button_id,))
                result = cursor.fetchone()
                conn.close()
                
                if result:
                    message_number = result[0]
                    self.db.delete_message_button(button_id)
                    await self.show_message_buttons(update, context, message_number)
            
            # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====
            elif data == "manage_welcome_buttons":
                await self.show_welcome_buttons_management(update, context)
            elif data == "add_welcome_button":
                await self.request_text_input(update, context, "add_welcome_button")
            elif data.startswith("edit_welcome_button_") and not data.startswith("edit_welcome_button_text_"):
                button_id = int(data.split("_")[3])
                await self.show_welcome_button_edit(update, context, button_id)
            elif data.startswith("edit_welcome_button_text_"):
                button_id = int(data.split("_")[4])
                await self.request_text_input(update, context, "edit_welcome_button_text", button_id=button_id)
            elif data.startswith("delete_welcome_button_"):
                button_id = int(data.split("_")[3])
                await self.show_welcome_button_delete_confirm(update, context, button_id)
            elif data.startswith("confirm_delete_welcome_button_"):
                button_id = int(data.split("_")[4])
                self.db.delete_welcome_button(button_id)
                await query.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                await self.show_welcome_buttons_management(update, context)
            elif data == "edit_welcome_text":
                await self.request_text_input(update, context, "welcome")
            elif data == "edit_welcome_photo":
                await self.request_text_input(update, context, "welcome_photo")
            elif data == "remove_welcome_photo":
                welcome_text = self.db.get_welcome_message()['text']
                self.db.set_welcome_message(welcome_text, photo_url="")
                await self.show_welcome_edit(update, context)
            
            # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–©–ê–õ–¨–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====
            elif data == "manage_goodbye_buttons":
                await self.show_goodbye_buttons_management(update, context)
            elif data == "add_goodbye_button":
                await self.request_text_input(update, context, "add_goodbye_button")
            elif data.startswith("edit_goodbye_button_") and not data.startswith("edit_goodbye_button_text_") and not data.startswith("edit_goodbye_button_url_"):
                button_id = int(data.split("_")[3])
                await self.show_goodbye_button_edit(update, context, button_id)
            elif data.startswith("edit_goodbye_button_text_"):
                button_id = int(data.split("_")[4])
                await self.request_text_input(update, context, "edit_goodbye_button_text", button_id=button_id)
            elif data.startswith("edit_goodbye_button_url_"):
                button_id = int(data.split("_")[4])
                await self.request_text_input(update, context, "edit_goodbye_button_url", button_id=button_id)
            elif data.startswith("delete_goodbye_button_"):
                button_id = int(data.split("_")[3])
                await self.show_goodbye_button_delete_confirm(update, context, button_id)
            elif data.startswith("confirm_delete_goodbye_button_"):
                button_id = int(data.split("_")[4])
                self.db.delete_goodbye_button(button_id)
                await query.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                await self.show_goodbye_buttons_management(update, context)
            elif data == "edit_goodbye_text":
                await self.request_text_input(update, context, "goodbye")
            elif data == "edit_goodbye_photo":
                await self.request_text_input(update, context, "goodbye_photo")
            elif data == "remove_goodbye_photo":
                goodbye_text = self.db.get_goodbye_message()['text']
                self.db.set_goodbye_message(goodbye_text, photo_url="")
                await self.show_goodbye_edit(update, context)
            
            # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø =====
            elif data == "edit_success_message_text":
                await self.request_text_input(update, context, "success_message")
            elif data == "reset_success_message":
                default_success_message = (
                    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n"
                    "üìö <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫:</b>\n"
                    "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
                    "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
                    "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º\n"
                    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
                    "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!</b>\n\n"
                    "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å!"
                )
                conn = self.db._get_connection()
                cursor = conn.cursor()
                cursor.execute('INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)', 
                              ('success_message', default_success_message))
                conn.commit()
                conn.close()
                await self.show_success_message_edit(update, context)
            
            # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
            elif await self.handle_additional_callbacks(update, context):
                pass
            
            else:
                await self.show_error_message(update, context, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {data}: {e}")
            await self.show_error_message(update, context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def show_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_text: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id in self.waiting_for:
            del self.waiting_for[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=error_text,
                parse_mode='HTML'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            await self.show_main_menu_safe(update, context)
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.waiting_for:
            return
        
        waiting_data = self.waiting_for[user_id]
        input_type = waiting_data["type"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ
        if not self.validate_waiting_state(waiting_data):
            await self.show_error_message(update, context, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
            if update.message.photo:
                await self.handle_photo_input(update, context, waiting_data)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            text = update.message.text if update.message.text else update.message.caption
            if not text:
                await self.show_error_message(update, context, "‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø =====
            if input_type == "add_welcome_button":
                await self.handle_add_welcome_button_input(update, context, text)
            elif input_type == "edit_welcome_button_text":
                await self.handle_edit_welcome_button_text_input(update, context, text)
            
            # ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –ü–†–û–©–ê–ù–ò–Ø =====
            elif input_type == "add_goodbye_button":
                await self.handle_add_goodbye_button_input(update, context, text)
            elif input_type == "edit_goodbye_button_text":
                await self.handle_edit_goodbye_button_text_input(update, context, text)
            elif input_type == "edit_goodbye_button_url":
                await self.handle_edit_goodbye_button_url_input(update, context, text)
                
            # ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô =====
            elif input_type == "payment_message_text":
                await self.handle_payment_message_input(update, context, text, "payment_message_text")
            elif input_type == "payment_message_photo":
                await self.handle_payment_message_input(update, context, text, "payment_message_photo")
            
            # ===== –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–´–• –¢–ò–ü–û–í –î–õ–Ø –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò =====
            elif input_type == "mass_text":
                await self.handle_mass_text_input(update, context, text)
            elif input_type == "mass_photo":
                await self.handle_mass_photo_input(update, context, text)
            elif input_type == "mass_time":
                await self.handle_mass_time_input(update, context, text)
            elif input_type == "mass_button_text":
                await self.handle_mass_button_text_input(update, context, text)
            elif input_type == "mass_button_url":
                await self.handle_mass_button_url_input(update, context, text)
            
            # ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–°–¢–ê–õ–¨–ù–´–• –¢–ò–ü–û–í =====
            elif input_type == "broadcast_timer":
                await self.handle_broadcast_timer(update, context, text)
            elif input_type == "add_message":
                await self.handle_add_message(update, context, text)
            elif input_type == "add_button":
                await self.handle_add_button(update, context, text)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            elif input_type == "welcome":
                if len(text) > 4096:
                    await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
                    return
                self.db.set_welcome_message(text)
                await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_welcome_edit_from_context(update, context)
                
            elif input_type == "goodbye":
                if len(text) > 4096:
                    await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
                    return
                self.db.set_goodbye_message(text)
                await update.message.reply_text("‚úÖ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_goodbye_edit_from_context(update, context)
            
            elif input_type == "success_message":
                if len(text) > 4096:
                    await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
                    return
                conn = self.db._get_connection()
                cursor = conn.cursor()
                cursor.execute('INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)', ('success_message', text))
                conn.commit()
                conn.close()
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                del self.waiting_for[user_id]
                await self.show_success_message_edit_from_context(update, context)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏
            elif input_type == "broadcast_text":
                message_number = waiting_data["message_number"]
                if len(text) > 4096:
                    await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
                    return
                self.db.update_broadcast_message(message_number, text=text)
                await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} –æ–±–Ω–æ–≤–ª—ë–Ω!")
                del self.waiting_for[user_id]
                await self.show_message_edit_from_context(update, context, message_number)
            
            elif input_type == "broadcast_delay":
                message_number = waiting_data["message_number"]
                
                delay_hours, delay_display = self.parse_delay_input(text)
                
                if delay_hours is not None and delay_hours > 0:
                    self.db.update_broadcast_message(message_number, delay_hours=delay_hours)
                    await update.message.reply_text(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {delay_display}!")
                    del self.waiting_for[user_id]
                    await self.show_message_edit_from_context(update, context, message_number)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n\n"
                        "‚Ä¢ <code>3–º</code> –∏–ª–∏ <code>3 –º–∏–Ω—É—Ç—ã</code>\n"
                        "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code>\n"
                        "‚Ä¢ <code>1.5</code> (–¥–ª—è 1.5 —á–∞—Å–æ–≤)\n"
                        "‚Ä¢ <code>0.05</code> (–¥–ª—è 3 –º–∏–Ω—É—Ç)",
                        parse_mode='HTML'
                    )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ
            elif input_type in ["broadcast_photo", "welcome_photo", "goodbye_photo", "payment_message_photo"]:
                if text.startswith("http://") or text.startswith("https://"):
                    await self.handle_photo_url_input(update, context, text, input_type, **waiting_data)
                else:
                    await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)")
            
            elif input_type == "edit_button_text":
                button_id = waiting_data["button_id"]
                if len(text) > 64:
                    await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
                    return
                    
                self.db.update_message_button(button_id, button_text=text)
                await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                del self.waiting_for[user_id]
                await self.show_button_edit_from_context(update, context, button_id)
            
            elif input_type == "edit_button_url":
                if not (text.startswith("http://") or text.startswith("https://")):
                    await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                    return
                
                if len(text) > 256:
                    await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                    return
                
                button_id = waiting_data["button_id"]
                self.db.update_message_button(button_id, button_url=text)
                await update.message.reply_text("‚úÖ URL –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                del self.waiting_for[user_id]
                await self.show_button_edit_from_context(update, context, button_id)
            
            else:
                await self.show_error_message(update, context, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞.")
                
        except Exception as e:
            if 'Event loop is closed' not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ {user_id}: {e}")
            await self.show_error_message(update, context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò =====
    
    async def handle_mass_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if len(text) > 4096:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        self.broadcast_drafts[user_id]["message_text"] = text
        
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        del self.waiting_for[user_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_mass_photo_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if not (text.startswith("http://") or text.startswith("https://")):
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)")
            return
        
        if user_id not in self.broadcast_drafts:
            self.broadcast_drafts[user_id] = {
                "message_text": "",
                "photo_data": None,
                "buttons": [],
                "scheduled_hours": None,
                "created_at": datetime.now()
            }
        
        self.broadcast_drafts[user_id]["photo_data"] = text
        
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        del self.waiting_for[user_id]
        
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_mass_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.broadcast_drafts:
            await update.message.reply_text("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
        if not text.strip():
            self.broadcast_drafts[user_id]["scheduled_hours"] = None
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–π—á–∞—Å!")
        else:
            try:
                hours = float(text.strip())
                if hours <= 0:
                    await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                
                if hours > 8760:  # –ë–æ–ª—å—à–µ –≥–æ–¥–∞
                    await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤")
                    return
                
                self.broadcast_drafts[user_id]["scheduled_hours"] = hours
                scheduled_time = datetime.now() + timedelta(hours=hours)
                await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}!")
                
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤")
                return
        
        del self.waiting_for[user_id]
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_mass_button_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if len(text) > 64:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if user_id not in self.broadcast_drafts:
            await update.message.reply_text("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É URL
        self.waiting_for[user_id]["button_text"] = text
        self.waiting_for[user_id]["type"] = "mass_button_url"
        
        await update.message.reply_text("üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    
    async def handle_mass_button_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if not (text.startswith("http://") or text.startswith("https://")):
            await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        if len(text) > 256:
            await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
            return
        
        if user_id not in self.broadcast_drafts:
            await update.message.reply_text("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫
        if len(self.broadcast_drafts[user_id]["buttons"]) >= 10:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        button_text = self.waiting_for[user_id]["button_text"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.broadcast_drafts[user_id]["buttons"].append({
            "text": button_text,
            "url": text
        })
        
        await update.message.reply_text("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        del self.waiting_for[user_id]
        
        await self.show_send_all_menu_from_context(update, context)
    
    async def handle_photo_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, waiting_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        input_type = waiting_data["type"]
        
        if input_type == "mass_photo":
            # –§–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            photo_file_id = update.message.photo[-1].file_id
            
            if user_id not in self.broadcast_drafts:
                self.broadcast_drafts[user_id] = {
                    "message_text": "",
                    "photo_data": None,
                    "buttons": [],
                    "scheduled_hours": None,
                    "created_at": datetime.now()
                }
            
            self.broadcast_drafts[user_id]["photo_data"] = photo_file_id
            
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            
            await self.show_send_all_menu_from_context(update, context)
        
        elif input_type == "payment_message_photo":
            # –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
            photo_file_id = update.message.photo[-1].file_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            current_data = self.db.get_payment_success_message()
            current_text = current_data['text'] if current_data else None
            
            if not current_text:
                current_text = (
                    "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                    "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                    "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                )
            
            self.db.set_payment_success_message(current_text, photo_file_id)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
        
        elif input_type == "broadcast_photo":
            # –§–æ—Ç–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            message_number = waiting_data["message_number"]
            photo_file_id = update.message.photo[-1].file_id
            
            self.db.update_broadcast_message(message_number, photo_url=photo_file_id)
            await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_message_edit_from_context(update, context, message_number)
        
        elif input_type == "welcome_photo":
            # –§–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            photo_file_id = update.message.photo[-1].file_id
            welcome_text = self.db.get_welcome_message()['text']
            self.db.set_welcome_message(welcome_text, photo_url=photo_file_id)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_welcome_edit_from_context(update, context)
        
        elif input_type == "goodbye_photo":
            # –§–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            photo_file_id = update.message.photo[-1].file_id
            goodbye_text = self.db.get_goodbye_message()['text']
            self.db.set_goodbye_message(goodbye_text, photo_url=photo_file_id)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            del self.waiting_for[user_id]
            await self.show_goodbye_edit_from_context(update, context)
        
        else:
            await self.show_error_message(update, context, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.")
    
    async def handle_broadcast_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        try:
            hours = float(text)
            if hours < 1:
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            
            resume_time = datetime.now() + timedelta(hours=hours)
            self.db.set_broadcast_status(False, resume_time.isoformat())
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ {hours} —á–∞—Å–æ–≤. –ê–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {resume_time.strftime('%d.%m.%Y %H:%M')}"
            )
            
            del self.waiting_for[user_id]
            await asyncio.sleep(2)
            await self.show_main_menu_safe(update, context)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–±–æ–ª—å—à–µ 0)")
    
    async def handle_photo_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, input_type: str, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        
        if input_type == "broadcast_photo":
            message_number = kwargs.get("message_number")
            self.db.update_broadcast_message(message_number, photo_url=url)
            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_message_edit_from_context(update, context, message_number)
        
        elif input_type == "welcome_photo":
            welcome_text = self.db.get_welcome_message()['text']
            self.db.set_welcome_message(welcome_text, photo_url=url)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_welcome_edit_from_context(update, context)
        
        elif input_type == "goodbye_photo":
            goodbye_text = self.db.get_goodbye_message()['text']
            self.db.set_goodbye_message(goodbye_text, photo_url=url)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_goodbye_edit_from_context(update, context)
        
        elif input_type == "payment_message_photo":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            current_data = self.db.get_payment_success_message()
            current_text = current_data['text'] if current_data else None
            
            if not current_text:
                current_text = (
                    "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
                    "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "üìö –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n"
                    "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
                )
            
            self.db.set_payment_success_message(current_text, url)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_payment_message_edit_from_context(update, context)
        
        elif input_type == "mass_photo":
            if user_id not in self.broadcast_drafts:
                self.broadcast_drafts[user_id] = {
                    "message_text": "",
                    "photo_data": None,
                    "buttons": [],
                    "scheduled_hours": None,
                    "created_at": datetime.now()
                }
            
            self.broadcast_drafts[user_id]["photo_data"] = url
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            del self.waiting_for[user_id]
            await self.show_send_all_menu_from_context(update, context)
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–°–¢–ê–õ–¨–ù–´–• CALLBACK =====
    
    async def handle_additional_callbacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏
        if data.startswith("edit_text_"):
            message_number = int(data.split("_")[2])
            await self.request_text_input(update, context, "broadcast_text", message_number=message_number)
        elif data.startswith("edit_delay_"):
            message_number = int(data.split("_")[2])
            await self.request_text_input(update, context, "broadcast_delay", message_number=message_number)
        elif data.startswith("edit_photo_"):
            message_number = int(data.split("_")[2])
            await self.request_text_input(update, context, "broadcast_photo", message_number=message_number)
        elif data.startswith("remove_photo_"):
            message_number = int(data.split("_")[2])
            self.db.update_broadcast_message(message_number, photo_url="")
            await self.show_message_edit(update, context, message_number)
        elif data.startswith("add_button_"):
            message_number = int(data.split("_")[2])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫
            existing_buttons = self.db.get_message_buttons(message_number)
            if len(existing_buttons) >= 3:
                await query.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)
                return False
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å message_number
            await self.request_text_input(update, context, "add_button", message_number=message_number)
        elif data.startswith("delete_msg_"):
            message_number = int(data.split("_")[2])
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{message_number}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_msg_{message_number}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.safe_edit_or_send_message(
                update, context,
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_number}?\n\n–≠—Ç–æ —Ç–∞–∫–∂–µ –æ—Ç–º–µ–Ω–∏—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup
            )
        elif data.startswith("confirm_delete_"):
            message_number = int(data.split("_")[2])
            self.db.delete_broadcast_message(message_number)
            await self.show_broadcast_menu(update, context)
        elif data == "add_message":
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = update.callback_query.from_user.id
            self.waiting_for[user_id] = {
                "type": "add_message", 
                "created_at": datetime.now(), 
                "step": "text"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
            }
            
            await self.safe_edit_or_send_message(
                update, context,
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast")]])
            )
        else:
            return False  # –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        return True  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        return True  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    
    async def handle_add_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        if len(text) > 4096:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            self.waiting_for[user_id]["text"] = text
            self.waiting_for[user_id]["step"] = "delay"
            await update.message.reply_text(
                "‚è∞ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É:\n\n"
                "üìù <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n"
                "‚Ä¢ <code>30–º</code> –∏–ª–∏ <code>30 –º–∏–Ω—É—Ç</code> - –¥–ª—è –º–∏–Ω—É—Ç\n"
                "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code> - –¥–ª—è —á–∞—Å–æ–≤\n"
                "‚Ä¢ <code>1.5</code> - –¥–ª—è 1.5 —á–∞—Å–æ–≤\n"
                "‚Ä¢ <code>0.05</code> - –¥–ª—è 3 –º–∏–Ω—É—Ç",
                parse_mode='HTML'
            )
        elif current_step == "delay":
            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay_hours, delay_display = self.parse_delay_input(text)
            
            if delay_hours is not None and delay_hours > 0:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = waiting_data["text"]
                new_number = self.db.add_broadcast_message(message_text, delay_hours)
                
                await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {new_number} –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_display}!")
                del self.waiting_for[user_id]
                await self.show_broadcast_menu_from_context(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n\n"
                    "‚Ä¢ <code>3–º</code> –∏–ª–∏ <code>3 –º–∏–Ω—É—Ç—ã</code>\n"
                    "‚Ä¢ <code>2—á</code> –∏–ª–∏ <code>2 —á–∞—Å–∞</code>\n"
                    "‚Ä¢ <code>1.5</code> (–¥–ª—è 1.5 —á–∞—Å–æ–≤)\n"
                    "‚Ä¢ <code>0.05</code> (–¥–ª—è 3 –º–∏–Ω—É—Ç)",
                    parse_mode='HTML'
                )
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step='{current_step}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.waiting_for:
                del self.waiting_for[user_id]
    
    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î handle_add_button =====
    
    async def handle_add_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        user_id = update.effective_user.id
        waiting_data = self.waiting_for[user_id]
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        current_step = waiting_data.get("step", "text")
        
        if current_step == "text":
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if len(text) > 64:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ URL
            self.waiting_for[user_id]["button_text"] = text
            self.waiting_for[user_id]["step"] = "url"
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{text}</b>\n\n"
                f"üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä: https://example.com\n"
                f"üéØ UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='HTML'
            )
            
        elif current_step == "url":
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º URL –∫–Ω–æ–ø–∫–∏
            if not (text.startswith("http://") or text.startswith("https://")):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            if len(text) > 256:
                await update.message.reply_text("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_number = waiting_data["message_number"]
            button_text = waiting_data["button_text"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            existing_buttons = self.db.get_message_buttons(message_number)
            position = len(existing_buttons) + 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ë–î
            self.db.add_message_button(message_number, button_text, text, position)
            
            await update.message.reply_text(
                f"‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
                f"üîó <b>URL:</b> {text}\n\n"
                f"üéØ <b>UTM –º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>",
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del self.waiting_for[user_id]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
            await self.show_message_buttons_from_context(update, context, message_number)
            
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step='{current_step}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.waiting_for:
                del self.waiting_for[user_id]
    
    def validate_waiting_state(self, waiting_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ"""
        if not waiting_data or "type" not in waiting_data:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (30 –º–∏–Ω—É—Ç)
        created_at = waiting_data.get("created_at")
        if created_at and (datetime.now() - created_at).total_seconds() > 1800:
            return False
        
        return True
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô =====
    
    async def show_message_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_number):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        msg_data = self.db.get_broadcast_message(message_number)
        if not msg_data:
            await update.callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        text, delay_hours, photo_url = msg_data
        buttons = self.db.get_message_buttons(message_number)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{message_number}")],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data=f"edit_delay_{message_number}")],
            [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{message_number}")]
        ]
        
        if photo_url:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_photo_{message_number}")])
        
        keyboard.append([InlineKeyboardButton("üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data=f"manage_buttons_{message_number}")])
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_msg_{message_number}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        buttons_info = ""
        if buttons:
            buttons_info = f"\n<b>–ö–Ω–æ–ø–∫–∏ ({len(buttons)}):</b>\n"
            for i, (button_id, button_text, button_url, position) in enumerate(buttons, 1):
                buttons_info += f"{i}. {button_text} ‚Üí {button_url}\n"
        
        if delay_hours < 1:
            delay_str = f"{int(delay_hours * 60)} –º–∏–Ω—É—Ç"
        else:
            delay_str = f"{delay_hours} —á–∞—Å–æ–≤"
        
        message_text = (
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ {message_number}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay_str} –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"<b>–§–æ—Ç–æ:</b> {'–ï—Å—Ç—å' if photo_url else '–ù–µ—Ç'}"
            f"{buttons_info}\n\n"
            f"üí° <i>–í—Å–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç UTM –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</i>"
        )
        
        await self.safe_edit_or_send_message(update, context, message_text, reply_markup)
